// Script para analisar e corrigir o problema de timing do paywall
import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const DEVICE_ID = "0315a2fe-220a-401b-b1b9-055a27733360";

async function analyzePaywallTiming() {
  console.log('üîç [AN√ÅLISE] Analisando problema de timing do paywall');
  console.log('üìã [AN√ÅLISE] Device ID:', DEVICE_ID);
  
  try {
    // 1. Verificar estado atual da tabela user_creations
    console.log('\n1Ô∏è‚É£ [AN√ÅLISE] Verificando tabela user_creations...');
    const { data: userCreations, error: userCreationsError } = await supabase
      .from('user_creations')
      .select('*')
      .eq('device_id', DEVICE_ID);
    
    if (userCreationsError) {
      console.error('‚ùå [AN√ÅLISE] Erro ao consultar user_creations:', userCreationsError.message);
      return;
    }
    
    console.log('üìä [AN√ÅLISE] Estado atual user_creations:', JSON.stringify(userCreations, null, 2));
    
    // 2. Verificar quantas m√∫sicas existem na tabela songs para este device_id
    console.log('\n2Ô∏è‚É£ [AN√ÅLISE] Verificando tabela songs...');
    const { data: songs, error: songsError } = await supabase
      .from('songs')
      .select('*')
      .or(`user_id.eq.${DEVICE_ID},guest_id.eq.${DEVICE_ID}`)
      .order('created_at', { ascending: true });
    
    if (songsError) {
      console.error('‚ùå [AN√ÅLISE] Erro ao consultar songs:', songsError.message);
      return;
    }
    
    console.log('üéµ [AN√ÅLISE] M√∫sicas encontradas:', songs.length);
    songs.forEach((song, index) => {
      console.log(`   ${index + 1}. ID: ${song.id}, Title: ${song.title}, Created: ${song.created_at}`);
    });
    
    // 3. Analisar discrep√¢ncia
    const actualSongs = songs.length;
    const recordedCreations = userCreations[0]?.creations || 0;
    const recordedFreeUsed = userCreations[0]?.freesongsused || 0;
    
    console.log('\n3Ô∏è‚É£ [AN√ÅLISE] An√°lise de discrep√¢ncia:');
    console.log(`   üìä M√∫sicas reais na tabela songs: ${actualSongs}`);
    console.log(`   üìä Cria√ß√µes registradas em user_creations: ${recordedCreations}`);
    console.log(`   üìä M√∫sicas gratuitas usadas registradas: ${recordedFreeUsed}`);
    
    if (actualSongs !== recordedCreations) {
      console.log('‚ö†Ô∏è [AN√ÅLISE] DISCREP√ÇNCIA DETECTADA!');
      console.log(`   üîß Diferen√ßa: ${actualSongs - recordedCreations} m√∫sicas`);
    }
    
    if (recordedFreeUsed > actualSongs) {
      console.log('‚ö†Ô∏è [AN√ÅLISE] CONTADOR FREESONGSUSED INCORRETO!');
      console.log(`   üîß Deveria ser: ${actualSongs}, mas est√°: ${recordedFreeUsed}`);
    }
    
    // 4. Propor corre√ß√£o
    console.log('\n4Ô∏è‚É£ [AN√ÅLISE] Proposta de corre√ß√£o:');
    
    if (userCreations.length === 0) {
      console.log('   ‚úÖ Nenhum registro em user_creations - trigger funcionar√° na pr√≥xima inser√ß√£o');
    } else {
      const correctCreations = actualSongs;
      const correctFreeUsed = Math.min(actualSongs, 1); // M√°ximo 1 m√∫sica gratuita
      
      console.log(`   üîß Corrigir creations: ${recordedCreations} ‚Üí ${correctCreations}`);
      console.log(`   üîß Corrigir freesongsused: ${recordedFreeUsed} ‚Üí ${correctFreeUsed}`);
      
      // Aplicar corre√ß√£o
      console.log('\n5Ô∏è‚É£ [CORRE√á√ÉO] Aplicando corre√ß√£o...');
      const { error: updateError } = await supabase
        .from('user_creations')
        .update({
          creations: correctCreations,
          freesongsused: correctFreeUsed,
          updated_at: new Date().toISOString()
        })
        .eq('device_id', DEVICE_ID);
      
      if (updateError) {
        console.error('‚ùå [CORRE√á√ÉO] Erro ao aplicar corre√ß√£o:', updateError.message);
      } else {
        console.log('‚úÖ [CORRE√á√ÉO] Corre√ß√£o aplicada com sucesso!');
        
        // Verificar resultado
        const { data: updatedData } = await supabase
          .from('user_creations')
          .select('*')
          .eq('device_id', DEVICE_ID);
        
        console.log('üìä [CORRE√á√ÉO] Estado ap√≥s corre√ß√£o:', JSON.stringify(updatedData, null, 2));
      }
    }
    
    // 5. Testar paywall ap√≥s corre√ß√£o
    console.log('\n6Ô∏è‚É£ [TESTE] Testando paywall ap√≥s corre√ß√£o...');
    
    const response = await fetch('http://localhost:3337/api/user/creation-status', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-device-id': DEVICE_ID,
        'x-guest-id': DEVICE_ID
      }
    });
    
    if (response.ok) {
      const paywallStatus = await response.json();
      console.log('üìä [TESTE] Status do paywall ap√≥s corre√ß√£o:', JSON.stringify(paywallStatus, null, 2));
      
      if (paywallStatus.isFree === false) {
        console.log('‚úÖ [TESTE] Paywall funcionando corretamente - pr√≥xima m√∫sica ser√° paga');
      } else {
        console.log('‚ö†Ô∏è [TESTE] Paywall ainda permite m√∫sica gratuita');
      }
    } else {
      console.error('‚ùå [TESTE] Erro ao testar paywall:', response.status);
    }
    
  } catch (error) {
    console.error('üí• [AN√ÅLISE] Erro geral:', error.message);
  }
}

// Executar an√°lise
analyzePaywallTiming()
  .then(() => {
    console.log('\nüéâ [AN√ÅLISE] An√°lise de timing do paywall conclu√≠da!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå [AN√ÅLISE] Falha na an√°lise:', error.message);
    process.exit(1);
  });