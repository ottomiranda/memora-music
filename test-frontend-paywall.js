import fetch from 'node-fetch';

async function testFrontendPaywall() {
  console.log('üß™ Testando comportamento do paywall no frontend...');
  
  const baseUrl = 'http://localhost:3337';
  const deviceId = 'test-frontend-' + Date.now();
  
  try {
    // 1. Primeira verifica√ß√£o - deve retornar isFree: true
    console.log('\nüîç Primeira verifica√ß√£o de status...');
    const firstCheck = await fetch(`${baseUrl}/api/user/creation-status`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-device-id': deviceId,
        'x-guest-id': deviceId
      }
    });
    
    const firstResponse = await firstCheck.json();
    console.log('üìä Primeira resposta:', JSON.stringify(firstResponse, null, 2));
    
    // 2. Simular primeira cria√ß√£o de m√∫sica
    console.log('\nüéµ Simulando primeira cria√ß√£o de m√∫sica...');
    const createFirst = await fetch(`${baseUrl}/api/generate-preview`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-device-id': deviceId,
        'x-guest-id': deviceId
      },
      body: JSON.stringify({
        occasion: 'anivers√°rio',
        recipientName: 'Jo√£o',
        relationship: 'amigo',
        senderName: 'Maria',
        hobbies: 'futebol, m√∫sica',
        qualities: 'engra√ßado, leal',
        genre: 'pop',
        lyricsOnly: true
      })
    });
    
    const createFirstResponse = await createFirst.json();
    console.log('üé∂ Primeira cria√ß√£o:', createFirstResponse.success ? 'Sucesso' : 'Falhou');
    if (!createFirstResponse.success) {
      console.log('‚ùå Erro na primeira cria√ß√£o:', createFirstResponse);
    }
    
    // 3. Segunda verifica√ß√£o - deve retornar isFree: false
    console.log('\nüîç Segunda verifica√ß√£o de status (ap√≥s primeira cria√ß√£o)...');
    const secondCheck = await fetch(`${baseUrl}/api/user/creation-status`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-device-id': deviceId,
        'x-guest-id': deviceId
      }
    });
    
    const secondResponse = await secondCheck.json();
    console.log('üìä Segunda resposta:', JSON.stringify(secondResponse, null, 2));
    
    // 4. Tentar segunda cria√ß√£o - deve bloquear com paywall
    console.log('\nüéµ Tentando segunda cria√ß√£o (deve ativar paywall)...');
    const createSecond = await fetch(`${baseUrl}/api/generate-preview`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-device-id': deviceId,
        'x-guest-id': deviceId
      },
      body: JSON.stringify({
        occasion: 'formatura',
        recipientName: 'Ana',
        relationship: 'irm√£',
        senderName: 'Pedro',
        hobbies: 'leitura, dan√ßa',
        qualities: 'inteligente, carinhosa',
        genre: 'rock',
        lyricsOnly: true
      })
    });
    
    const createSecondResponse = await createSecond.json();
    console.log('üö´ Segunda cria√ß√£o:', createSecondResponse);
    
    // An√°lise dos resultados
    console.log('\nüìã AN√ÅLISE DOS RESULTADOS:');
    console.log(`‚úÖ Primeira verifica√ß√£o isFree: ${firstResponse.isFree}`);
    console.log(`‚úÖ Segunda verifica√ß√£o isFree: ${secondResponse.isFree}`);
    console.log(`‚úÖ Primeira cria√ß√£o sucesso: ${createFirstResponse.success}`);
    console.log(`‚úÖ Segunda cria√ß√£o bloqueada: ${createSecondResponse.error === 'PAYMENT_REQUIRED'}`);
    
    if (firstResponse.isFree && !secondResponse.isFree && createFirstResponse.success && createSecondResponse.error === 'PAYMENT_REQUIRED') {
      console.log('\nüéâ PAYWALL FUNCIONANDO CORRETAMENTE!');
    } else {
      console.log('\n‚ùå PROBLEMA IDENTIFICADO NO PAYWALL!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testFrontendPaywall();