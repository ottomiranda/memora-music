// Teste detalhado do paywall - verificar busca e incremento

const BASE_URL = 'http://localhost:3337/api';

// Fun√ß√£o para fazer requisi√ß√µes HTTP
const makeRequest = async (url, options = {}) => {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`‚ùå Erro na requisi√ß√£o para ${url}:`, error.message);
    return { error: error.message };
  }
};

// Fun√ß√£o para verificar status do usu√°rio
const checkUserStatus = async (deviceId, guestId) => {
  return await makeRequest(`${BASE_URL}/user/creation-status`, {
    headers: {
      'x-device-id': deviceId,
      'x-guest-id': guestId
    }
  });
};

// Simular dados de um dispositivo
const testDeviceId = `test-device-${Date.now()}`;
const testGuestId = `test-guest-${Date.now()}`;

console.log('üîç TESTE DETALHADO DO PAYWALL');
console.log('DeviceId:', testDeviceId);
console.log('GuestId:', testGuestId);

async function testPaywallFlow() {
  try {
    // 1. Verificar status inicial
    console.log('\n=== TESTE 1: Status inicial ===');
    const initialStatus = await fetch(`${BASE_URL}/user/creation-status`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-device-id': testDeviceId,
        'x-guest-id': testGuestId
      }
    });
    
    const initialData = await initialStatus.json();
    console.log('üìä Status inicial:', JSON.stringify(initialData, null, 2));
    
    if (!initialData.isFree) {
      console.log('‚ùå ERRO: Status inicial deveria ser isFree: true');
      return;
    }
    
    // 2. Criar primeira m√∫sica
    console.log('\n=== TESTE 2: Primeira cria√ß√£o ===');
    const firstCreation = await fetch(`${BASE_URL}/generate-preview`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-device-id': testDeviceId,
        'x-guest-id': testGuestId
      },
      body: JSON.stringify({
        recipientName: 'Jo√£o',
        occasion: 'anivers√°rio',
        relationship: 'amigo',
        senderName: 'Maria',
        hobbies: 'm√∫sica, esportes',
        qualities: 'carinhoso, engra√ßado',
        genre: 'pop',
        mood: 'alegre',
        lyricsOnly: false
      })
    });
    
    const firstData = await firstCreation.json();
    console.log('üéµ Primeira cria√ß√£o:', {
      success: firstData.success,
      songTitle: firstData.songTitle ? firstData.songTitle.substring(0, 50) + '...' : 'N/A'
    });
    
    if (!firstData.success) {
      console.log('‚ùå ERRO: Primeira cria√ß√£o falhou:', firstData);
      return;
    }
    
    // 3. Aguardar um pouco para garantir que o banco foi atualizado
    console.log('\n‚è≥ Aguardando 2 segundos para sincroniza√ß√£o...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 4. Verificar status ap√≥s primeira cria√ß√£o
    console.log('\n=== TESTE 3: Status ap√≥s primeira cria√ß√£o ===');
    const afterFirstStatus = await fetch(`${BASE_URL}/user/creation-status`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'x-device-id': testDeviceId,
        'x-guest-id': testGuestId
      }
    });
    
    const afterFirstData = await afterFirstStatus.json();
    console.log('üìä Status ap√≥s primeira:', JSON.stringify(afterFirstData, null, 2));
    
    if (afterFirstData.isFree) {
      console.log('‚ùå ERRO CR√çTICO: Status ap√≥s primeira cria√ß√£o deveria ser isFree: false');
      console.log('üîç Isso indica que o contador n√£o foi incrementado corretamente!');
    } else {
      console.log('‚úÖ SUCESSO: Paywall funcionando corretamente!');
    }
    
    // 5. Tentar segunda cria√ß√£o (deve falhar)
    console.log('\n=== TESTE 4: Segunda cria√ß√£o (deve falhar) ===');
    const secondCreation = await fetch(`${BASE_URL}/generate-preview`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-device-id': testDeviceId,
        'x-guest-id': testGuestId
      },
      body: JSON.stringify({
        recipientName: 'Maria',
        occasion: 'anivers√°rio',
        relationship: 'irm√£',
        senderName: 'Jo√£o',
        hobbies: 'dan√ßa, cinema',
        qualities: 'divertida, inteligente',
        genre: 'rock',
        mood: 'energ√©tico',
        lyricsOnly: false
      })
    });
    
    const secondData = await secondCreation.json();
    console.log('üéµ Segunda cria√ß√£o:', {
      success: secondData.success,
      error: secondData.error,
      message: secondData.message
    });
    
    if (secondData.success) {
      console.log('‚ùå ERRO: Segunda cria√ß√£o deveria ter falhado com paywall!');
    } else if (secondData.error === 'PAYMENT_REQUIRED') {
      console.log('‚úÖ SUCESSO: Paywall bloqueou segunda cria√ß√£o corretamente!');
    } else {
      console.log('‚ö†Ô∏è AVISO: Segunda cria√ß√£o falhou por outro motivo:', secondData);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testPaywallFlow();