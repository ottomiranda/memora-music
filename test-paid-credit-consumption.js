#!/usr/bin/env node

/**
 * Script para testar o comportamento de uso √∫nico dos cr√©ditos pagos
 * ap√≥s a aplica√ß√£o da migra√ß√£o 027_enforce_single_use_paid_credits.sql
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// Carregar vari√°veis de ambiente
config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testPaidCreditConsumption() {
  console.log('\nüß™ === TESTE DE CONSUMO DE CR√âDITOS PAGOS ===\n');

  try {
    // 1. Criar uma transa√ß√£o de teste com cr√©dito dispon√≠vel
    console.log('1Ô∏è‚É£ Criando transa√ß√£o de teste com cr√©dito dispon√≠vel...');
    
    const testTransactionId = `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const testPaymentIntentId = `pi_test_${Date.now()}`;
    
    const { data: insertData, error: insertError } = await supabase
      .from('stripe_transactions')
      .insert({
        id: testTransactionId,
        payment_intent_id: testPaymentIntentId,
        amount: 500, // R$ 5,00
        currency: 'brl',
        status: 'succeeded',
        available_credits: 1, // 1 cr√©dito dispon√≠vel
        credit_consumed_at: null, // Ainda n√£o consumido
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (insertError) {
      console.error('‚ùå Erro ao criar transa√ß√£o de teste:', insertError);
      return;
    }

    console.log('‚úÖ Transa√ß√£o criada:', insertData);

    // 2. Testar primeiro consumo (deve funcionar)
    console.log('\n2Ô∏è‚É£ Testando primeiro consumo de cr√©dito...');
    
    const { data: firstConsumption, error: firstError } = await supabase
      .rpc('consume_paid_credit', {
        transaction_id: testTransactionId
      });

    if (firstError) {
      console.error('‚ùå Erro no primeiro consumo:', firstError);
    } else {
      console.log('‚úÖ Primeiro consumo bem-sucedido:', firstConsumption);
    }

    // 3. Verificar estado da transa√ß√£o ap√≥s primeiro consumo
    console.log('\n3Ô∏è‚É£ Verificando estado da transa√ß√£o ap√≥s primeiro consumo...');
    
    const { data: afterFirst, error: checkError1 } = await supabase
      .from('stripe_transactions')
      .select('available_credits, credit_consumed_at')
      .eq('id', testTransactionId)
      .single();

    if (checkError1) {
      console.error('‚ùå Erro ao verificar transa√ß√£o:', checkError1);
    } else {
      console.log('‚úÖ Estado ap√≥s primeiro consumo:', afterFirst);
    }

    // 4. Testar segundo consumo (deve falhar)
    console.log('\n4Ô∏è‚É£ Testando segundo consumo de cr√©dito (deve falhar)...');
    
    const { data: secondConsumption, error: secondError } = await supabase
      .rpc('consume_paid_credit', {
        transaction_id: testTransactionId
      });

    if (secondError) {
      console.log('‚úÖ Segundo consumo falhou como esperado:', secondError.message);
    } else if (!secondConsumption) {
      console.log('‚úÖ Segundo consumo retornou null como esperado (cr√©dito j√° consumido)');
    } else {
      console.log('‚ùå PROBLEMA: Segundo consumo deveria ter falhado, mas retornou:', secondConsumption);
    }

    // 5. Verificar estado final da transa√ß√£o
    console.log('\n5Ô∏è‚É£ Verificando estado final da transa√ß√£o...');
    
    const { data: finalState, error: checkError2 } = await supabase
      .from('stripe_transactions')
      .select('available_credits, credit_consumed_at')
      .eq('id', testTransactionId)
      .single();

    if (checkError2) {
      console.error('‚ùå Erro ao verificar estado final:', checkError2);
    } else {
      console.log('‚úÖ Estado final:', finalState);
    }

    // 6. Limpeza - remover transa√ß√£o de teste
    console.log('\n6Ô∏è‚É£ Limpando transa√ß√£o de teste...');
    
    const { error: deleteError } = await supabase
      .from('stripe_transactions')
      .delete()
      .eq('id', testTransactionId);

    if (deleteError) {
      console.error('‚ùå Erro ao limpar transa√ß√£o de teste:', deleteError);
    } else {
      console.log('‚úÖ Transa√ß√£o de teste removida com sucesso');
    }

    console.log('\nüéâ === TESTE CONCLU√çDO ===');
    console.log('‚úÖ Comportamento de uso √∫nico dos cr√©ditos pagos validado com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
testPaidCreditConsumption()
  .then(() => {
    console.log('\n‚úÖ Script executado com sucesso');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro na execu√ß√£o do script:', error);
    process.exit(1);
  });