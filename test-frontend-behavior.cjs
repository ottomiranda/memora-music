/**
 * Script para testar o comportamento espec√≠fico do frontend
 * Simula exatamente o que acontece quando user_creations √© limpa
 */

const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://nvhaylwuvdmsjuwjsfva.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52aGF5bHd1dmRtc2p1d2pzZnZhIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1Njc2NzAzOSwiZXhwIjoyMDcyMzQzMDM5fQ.P8-0hboVl3OmtUwzg0iBCvTr5nY0jWMTTLr9F5XTB6c';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im52aGF5bHd1dmRtc2p1d2pzZnZhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY3NjcwMzksImV4cCI6MjA3MjM0MzAzOX0.WNZc_C9DAHTmjOaJpm-1TbH4-ZGKbO4oZR5c-KlPuzg';

async function testFrontendBehavior() {
  console.log('üîç Testando comportamento do frontend...');
  
  try {
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    const anonSupabase = createClient(supabaseUrl, supabaseAnonKey);
    
    // Identificar o usu√°rio Otto Miranda
    const ottoUserId = '0315a2fe-220a-401b-b1b9-055a27733360';
    console.log(`üéØ Testando com usu√°rio Otto: ${ottoUserId}`);
    
    // 1. Estado inicial - verificar m√∫sicas e user_creations
    console.log('\nüìä Estado inicial:');
    
    const { data: initialSongs, error: initialSongsError } = await supabase
      .from('songs')
      .select('id, title')
      .eq('user_id', ottoUserId);
    
    if (!initialSongsError) {
      console.log(`‚úÖ Otto tem ${initialSongs.length} m√∫sicas na tabela songs`);
    }
    
    const { data: initialCreations, error: initialCreationsError } = await supabase
      .from('user_creations')
      .select('creations')
      .eq('user_id', ottoUserId)
      .single();
    
    if (!initialCreationsError) {
      console.log(`‚úÖ user_creations mostra ${initialCreations.creations} cria√ß√µes`);
    }
    
    // 2. Simular requisi√ß√£o do frontend (como usu√°rio an√¥nimo)
    console.log('\nüåê Simulando requisi√ß√£o do frontend como usu√°rio an√¥nimo:');
    
    // Testar a query que o frontend faria (sem autentica√ß√£o)
    const { data: anonSongs, error: anonError } = await anonSupabase
      .from('songs')
      .select('*')
      .eq('user_id', ottoUserId)
      .order('created_at', { ascending: false });
    
    if (anonError) {
      console.log(`‚ùå Usu√°rio an√¥nimo n√£o pode ver m√∫sicas do Otto: ${anonError.message}`);
    } else {
      console.log(`‚ö†Ô∏è  Usu√°rio an√¥nimo pode ver ${anonSongs.length} m√∫sicas do Otto (PROBLEMA DE SEGURAN√áA!)`);
    }
    
    // 3. Simular limpeza da tabela user_creations
    console.log('\nüßπ Simulando limpeza da tabela user_creations:');
    
    // Fazer backup do estado atual
    const backupCreations = initialCreations;
    
    // Limpar user_creations para Otto
    const { error: deleteError } = await supabase
      .from('user_creations')
      .delete()
      .eq('user_id', ottoUserId);
    
    if (deleteError) {
      console.log(`‚ùå Erro ao limpar user_creations: ${deleteError.message}`);
    } else {
      console.log('‚úÖ user_creations limpa para Otto');
    }
    
    // 4. Verificar estado ap√≥s limpeza
    console.log('\nüìä Estado ap√≥s limpeza:');
    
    const { data: afterSongs, error: afterSongsError } = await supabase
      .from('songs')
      .select('id, title')
      .eq('user_id', ottoUserId);
    
    if (!afterSongsError) {
      console.log(`‚úÖ Otto ainda tem ${afterSongs.length} m√∫sicas na tabela songs`);
    }
    
    const { data: afterCreations, error: afterCreationsError } = await supabase
      .from('user_creations')
      .select('creations')
      .eq('user_id', ottoUserId)
      .single();
    
    if (afterCreationsError) {
      console.log(`‚úÖ user_creations n√£o existe mais para Otto: ${afterCreationsError.message}`);
    } else {
      console.log(`‚ö†Ô∏è  user_creations ainda existe: ${afterCreations.creations} cria√ß√µes`);
    }
    
    // 5. Testar requisi√ß√£o do frontend ap√≥s limpeza
    console.log('\nüåê Testando frontend ap√≥s limpeza:');
    
    const { data: afterAnonSongs, error: afterAnonError } = await anonSupabase
      .from('songs')
      .select('*')
      .eq('user_id', ottoUserId)
      .order('created_at', { ascending: false });
    
    if (afterAnonError) {
      console.log(`‚ùå Ap√≥s limpeza, usu√°rio an√¥nimo n√£o pode ver m√∫sicas: ${afterAnonError.message}`);
    } else {
      console.log(`‚úÖ Ap√≥s limpeza, usu√°rio an√¥nimo ainda v√™ ${afterAnonSongs.length} m√∫sicas`);
    }
    
    // 6. Simular requisi√ß√£o autenticada (como seria no frontend real)
    console.log('\nüîê Simulando requisi√ß√£o autenticada:');
    
    // Criar um cliente que simula um usu√°rio autenticado
    // (Na pr√°tica, isso seria feito com JWT token, mas vamos usar service_role para simular)
    const { data: authSongs, error: authError } = await supabase
      .from('songs')
      .select('*')
      .eq('user_id', ottoUserId)
      .order('created_at', { ascending: false });
    
    if (authError) {
      console.log(`‚ùå Usu√°rio autenticado n√£o pode ver m√∫sicas: ${authError.message}`);
    } else {
      console.log(`‚úÖ Usu√°rio autenticado v√™ ${authSongs.length} m√∫sicas`);
    }
    
    // 7. Restaurar estado original
    console.log('\nüîÑ Restaurando estado original:');
    
    if (backupCreations) {
      const { error: restoreError } = await supabase
        .from('user_creations')
        .insert({
          user_id: ottoUserId,
          creations: backupCreations.creations
        });
      
      if (restoreError) {
        console.log(`‚ùå Erro ao restaurar user_creations: ${restoreError.message}`);
      } else {
        console.log('‚úÖ user_creations restaurada');
      }
    }
    
    // 8. Verificar pol√≠ticas RLS espec√≠ficas
    console.log('\nüîí Analisando pol√≠ticas RLS:');
    
    const { data: policies, error: policiesError } = await supabase
      .from('pg_policies')
      .select('*')
      .eq('tablename', 'songs');
    
    if (policiesError) {
      console.log(`‚ùå Erro ao verificar pol√≠ticas: ${policiesError.message}`);
    } else {
      console.log(`‚úÖ Encontradas ${policies.length} pol√≠ticas para a tabela songs:`);
      policies.forEach(policy => {
        console.log(`  - ${policy.policyname}: ${policy.cmd} para ${policy.roles}`);
      });
    }
    
    console.log('\n‚úÖ Teste de comportamento do frontend conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
testFrontendBehavior().catch(console.error);