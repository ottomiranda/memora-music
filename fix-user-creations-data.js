import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function fixUserCreationsData() {
  console.log('üîß Corrigindo dados inconsistentes na tabela user_creations...\n');
  
  const testDeviceId = '0315a2fe-220a-401b-b1b9-055a27733360';
  
  try {
    // 1. Buscar todas as m√∫sicas do usu√°rio
    console.log('1Ô∏è‚É£ Buscando todas as m√∫sicas do usu√°rio...');
    const { data: songs, error: songsError } = await supabase
      .from('songs')
      .select('id, title, ispaid, created_at')
      .or(`user_id.eq.${testDeviceId},guest_id.eq.${testDeviceId}`)
      .order('created_at', { ascending: true });
    
    if (songsError) {
      console.error('‚ùå Erro ao buscar m√∫sicas:', songsError);
      return;
    }
    
    console.log(`üéµ Encontradas ${songs.length} m√∫sicas:`);
    songs.forEach((song, index) => {
      console.log(`   ${index + 1}. "${song.title}" - ${song.ispaid ? 'PAGA' : 'GRATUITA'} (${new Date(song.created_at).toLocaleString()})`);
    });
    
    // 2. Calcular contadores corretos
    const totalCreations = songs.length;
    const freeSongs = songs.filter(song => !song.ispaid);
    const correctFreeSongsUsed = freeSongs.length;
    
    console.log(`\n2Ô∏è‚É£ Calculando contadores corretos:`);
    console.log(`   - Total de cria√ß√µes: ${totalCreations}`);
    console.log(`   - M√∫sicas gratuitas: ${correctFreeSongsUsed}`);
    
    // 3. Verificar estado atual
    console.log('\n3Ô∏è‚É£ Verificando estado atual...');
    const { data: currentUser, error: userError } = await supabase
      .from('user_creations')
      .select('*')
      .eq('device_id', testDeviceId)
      .single();
    
    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', userError);
      return;
    }
    
    console.log('üìä Estado atual:', {
      creations: currentUser.creations,
      freesongsused: currentUser.freesongsused
    });
    
    console.log('üìä Estado correto:', {
      creations: totalCreations,
      freesongsused: correctFreeSongsUsed
    });
    
    // 4. Atualizar se necess√°rio
    if (currentUser.creations !== totalCreations || currentUser.freesongsused !== correctFreeSongsUsed) {
      console.log('\n4Ô∏è‚É£ Atualizando contadores...');
      
      const { data: updatedUser, error: updateError } = await supabase
        .from('user_creations')
        .update({
          creations: totalCreations,
          freesongsused: correctFreeSongsUsed,
          updated_at: new Date().toISOString()
        })
        .eq('device_id', testDeviceId)
        .select()
        .single();
      
      if (updateError) {
        console.error('‚ùå Erro ao atualizar:', updateError);
        return;
      }
      
      console.log('‚úÖ Contadores atualizados com sucesso!');
      console.log('üìä Novo estado:', {
        creations: updatedUser.creations,
        freesongsused: updatedUser.freesongsused
      });
    } else {
      console.log('\n‚úÖ Contadores j√° est√£o corretos!');
    }
    
    // 5. Verificar l√≥gica do paywall ap√≥s corre√ß√£o
    console.log('\n5Ô∏è‚É£ Verificando l√≥gica do paywall ap√≥s corre√ß√£o...');
    const finalFreeSongsUsed = correctFreeSongsUsed;
    const shouldNextBePaid = finalFreeSongsUsed >= 1;
    
    console.log(`üí∞ Com freesongsused=${finalFreeSongsUsed}:`);
    console.log(`   - Primeira m√∫sica (count=0): ${finalFreeSongsUsed === 0 ? 'GRATUITA ‚úÖ' : 'J√Å USADA'}`);
    console.log(`   - Segunda m√∫sica (count=1): ${finalFreeSongsUsed >= 1 ? 'DEVE SER PAGA ‚úÖ' : 'AINDA GRATUITA'}`);
    console.log(`   - Pr√≥xima m√∫sica deve ser: ${shouldNextBePaid ? 'PAGA ‚úÖ' : 'GRATUITA'}`);
    
    console.log(`\nüéØ RESULTADO FINAL:`);
    if (finalFreeSongsUsed >= 1) {
      console.log(`   ‚úÖ O paywall DEVE bloquear a pr√≥xima m√∫sica`);
      console.log(`   ‚úÖ Usu√°rio j√° usou ${finalFreeSongsUsed} m√∫sica(s) gratuita(s)`);
    } else {
      console.log(`   ‚ö†Ô∏è  A pr√≥xima m√∫sica ainda ser√° gratuita`);
      console.log(`   ‚ö†Ô∏è  Usu√°rio ainda n√£o usou nenhuma m√∫sica gratuita`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o:', error);
  }
}

fixUserCreationsData();