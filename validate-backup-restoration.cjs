#!/usr/bin/env node

/**
 * Script de Valida√ß√£o da Restaura√ß√£o do Backup Supabase
 * 
 * Verifica se todos os dados foram restaurados corretamente ap√≥s o backup
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function validateBackupRestoration() {
  console.log('üîç VALIDA√á√ÉO DA RESTAURA√á√ÉO DO BACKUP SUPABASE');
  console.log('=' .repeat(60));
  console.log(`Timestamp: ${new Date().toISOString()}\n`);

  const results = {
    tablesStatus: {},
    dataIntegrity: {},
    functionalTests: {},
    summary: { success: true, issues: [] }
  };

  try {
    // 1. VERIFICAR EXIST√äNCIA E CONTAGEM DAS TABELAS
    console.log('üìä 1. VERIFICANDO TABELAS PRINCIPAIS...\n');
    
    const mainTables = ['songs', 'user_creations', 'stripe_transactions'];
    
    for (const table of mainTables) {
      try {
        const { count, error } = await supabase
          .from(table)
          .select('*', { count: 'exact', head: true });
          
        if (error) {
          console.log(`‚ùå ${table}: ERRO - ${error.message}`);
          results.tablesStatus[table] = { status: 'error', error: error.message };
          results.summary.success = false;
          results.summary.issues.push(`Tabela ${table} inacess√≠vel`);
        } else {
          console.log(`‚úÖ ${table}: ${count} registros`);
          results.tablesStatus[table] = { status: 'ok', count };
          
          if (count === 0) {
            results.summary.issues.push(`Tabela ${table} est√° vazia`);
          }
        }
      } catch (err) {
        console.log(`‚ùå ${table}: EXCE√á√ÉO - ${err.message}`);
        results.tablesStatus[table] = { status: 'exception', error: err.message };
        results.summary.success = false;
        results.summary.issues.push(`Exce√ß√£o na tabela ${table}`);
      }
    }

    // 2. VERIFICAR ESTRUTURA DAS TABELAS
    console.log('\nüèóÔ∏è  2. VERIFICANDO ESTRUTURA DAS TABELAS...\n');
    
    // Verificar colunas da tabela songs
    try {
      const { data: songsStructure, error } = await supabase
        .from('songs')
        .select('id, user_id, guest_id, title, lyrics, audio_url_option1, created_at')
        .limit(1);
        
      if (!error) {
        console.log('‚úÖ songs: Estrutura OK');
        results.dataIntegrity.songs_structure = 'ok';
      } else {
        console.log(`‚ùå songs: Estrutura com problema - ${error.message}`);
        results.dataIntegrity.songs_structure = 'error';
        results.summary.issues.push('Estrutura da tabela songs com problema');
      }
    } catch (err) {
      console.log(`‚ùå songs: Erro na verifica√ß√£o de estrutura - ${err.message}`);
      results.dataIntegrity.songs_structure = 'error';
    }

    // Verificar colunas da tabela stripe_transactions (incluindo migra√ß√£o 027)
    try {
      const { data: stripeStructure, error } = await supabase
        .from('stripe_transactions')
        .select('id, payment_intent_id, user_id, amount, available_credits, credit_consumed_at')
        .limit(1);
        
      if (!error) {
        console.log('‚úÖ stripe_transactions: Estrutura OK (incluindo migra√ß√£o 027)');
        results.dataIntegrity.stripe_structure = 'ok';
        results.dataIntegrity.migration_027_applied = true;
      } else {
        console.log(`‚ùå stripe_transactions: Estrutura com problema - ${error.message}`);
        results.dataIntegrity.stripe_structure = 'error';
        results.dataIntegrity.migration_027_applied = false;
        results.summary.issues.push('Estrutura da tabela stripe_transactions com problema');
      }
    } catch (err) {
      console.log(`‚ùå stripe_transactions: Erro na verifica√ß√£o - ${err.message}`);
      results.dataIntegrity.stripe_structure = 'error';
      results.dataIntegrity.migration_027_applied = false;
    }

    // 3. VERIFICAR POL√çTICAS RLS
    console.log('\nüîí 3. VERIFICANDO POL√çTICAS RLS...\n');
    
    try {
      const { data: policies, error } = await supabase.rpc('get_policies_info');
      
      if (error && error.code !== '42883') { // Fun√ß√£o pode n√£o existir
        console.log(`‚ö†Ô∏è  RLS: N√£o foi poss√≠vel verificar pol√≠ticas - ${error.message}`);
        results.dataIntegrity.rls_policies = 'warning';
      } else {
        console.log('‚úÖ RLS: Pol√≠ticas acess√≠veis');
        results.dataIntegrity.rls_policies = 'ok';
      }
    } catch (err) {
      console.log(`‚ö†Ô∏è  RLS: Verifica√ß√£o n√£o dispon√≠vel - ${err.message}`);
      results.dataIntegrity.rls_policies = 'warning';
    }

    // 4. TESTES FUNCIONAIS B√ÅSICOS
    console.log('\nüß™ 4. EXECUTANDO TESTES FUNCIONAIS...\n');
    
    // Teste de inser√ß√£o na tabela songs
    const testSongId = `test-${Date.now()}`;
    try {
      const { data: insertData, error: insertError } = await supabase
        .from('songs')
        .insert({
          title: 'Teste de Valida√ß√£o',
          lyrics: 'Teste ap√≥s restaura√ß√£o do backup',
          guest_id: testSongId
        })
        .select();
        
      if (insertError) {
        console.log(`‚ùå Inser√ß√£o: FALHOU - ${insertError.message}`);
        results.functionalTests.insert = 'failed';
        results.summary.success = false;
        results.summary.issues.push('Falha na inser√ß√£o de dados');
      } else {
        console.log('‚úÖ Inser√ß√£o: SUCESSO');
        results.functionalTests.insert = 'success';
        
        // Teste de leitura
        const { data: readData, error: readError } = await supabase
          .from('songs')
          .select('*')
          .eq('guest_id', testSongId);
          
        if (readError) {
          console.log(`‚ùå Leitura: FALHOU - ${readError.message}`);
          results.functionalTests.read = 'failed';
          results.summary.issues.push('Falha na leitura de dados');
        } else if (readData && readData.length > 0) {
          console.log('‚úÖ Leitura: SUCESSO');
          results.functionalTests.read = 'success';
          
          // Teste de exclus√£o (limpeza)
          const { error: deleteError } = await supabase
            .from('songs')
            .delete()
            .eq('id', insertData[0].id);
            
          if (deleteError) {
            console.log(`‚ö†Ô∏è  Limpeza: FALHOU - ${deleteError.message}`);
            results.functionalTests.cleanup = 'failed';
          } else {
            console.log('‚úÖ Limpeza: SUCESSO');
            results.functionalTests.cleanup = 'success';
          }
        }
      }
    } catch (err) {
      console.log(`‚ùå Teste funcional: EXCE√á√ÉO - ${err.message}`);
      results.functionalTests.insert = 'exception';
      results.summary.success = false;
      results.summary.issues.push('Exce√ß√£o durante testes funcionais');
    }

    // 5. VERIFICAR FUN√á√ÉO consume_paid_credit (migra√ß√£o 027)
    console.log('\nüí≥ 5. VERIFICANDO FUN√á√ÉO consume_paid_credit...\n');
    
    try {
      // Tentar chamar a fun√ß√£o (deve falhar se n√£o houver dados, mas fun√ß√£o deve existir)
      const { data: functionTest, error: functionError } = await supabase
        .rpc('consume_paid_credit', { p_user_id: '00000000-0000-0000-0000-000000000000' });
        
      if (functionError && functionError.code === '42883') {
        console.log('‚ùå Fun√ß√£o consume_paid_credit: N√ÉO EXISTE');
        results.dataIntegrity.consume_paid_credit_function = false;
        results.summary.issues.push('Fun√ß√£o consume_paid_credit n√£o encontrada');
      } else {
        console.log('‚úÖ Fun√ß√£o consume_paid_credit: EXISTE');
        results.dataIntegrity.consume_paid_credit_function = true;
      }
    } catch (err) {
      console.log(`‚ö†Ô∏è  Fun√ß√£o consume_paid_credit: Verifica√ß√£o inconclusiva - ${err.message}`);
      results.dataIntegrity.consume_paid_credit_function = 'unknown';
    }

    // 6. RESUMO FINAL
    console.log('\nüìã 6. RESUMO DA VALIDA√á√ÉO...\n');
    
    if (results.summary.success && results.summary.issues.length === 0) {
      console.log('üéâ RESTAURA√á√ÉO VALIDADA COM SUCESSO!');
      console.log('‚úÖ Todos os testes passaram');
      console.log('‚úÖ Estrutura do banco restaurada');
      console.log('‚úÖ Funcionalidades b√°sicas operacionais');
    } else {
      console.log('‚ö†Ô∏è  RESTAURA√á√ÉO COM PROBLEMAS IDENTIFICADOS:');
      results.summary.issues.forEach(issue => {
        console.log(`   ‚Ä¢ ${issue}`);
      });
    }

    // Salvar relat√≥rio detalhado
    const reportPath = './backup-validation-report.json';
    const fs = require('fs');
    fs.writeFileSync(reportPath, JSON.stringify(results, null, 2));
    console.log(`\nüìÑ Relat√≥rio detalhado salvo em: ${reportPath}`);

    return results;

  } catch (error) {
    console.error('\nüí• ERRO CR√çTICO NA VALIDA√á√ÉO:', error.message);
    results.summary.success = false;
    results.summary.issues.push(`Erro cr√≠tico: ${error.message}`);
    return results;
  }
}

// Executar valida√ß√£o
if (require.main === module) {
  validateBackupRestoration()
    .then(results => {
      process.exit(results.summary.success ? 0 : 1);
    })
    .catch(error => {
      console.error('Erro na execu√ß√£o:', error);
      process.exit(1);
    });
}

module.exports = { validateBackupRestoration };