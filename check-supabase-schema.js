#!/usr/bin/env node

/**
 * Script de Verifica√ß√£o: Schema do Supabase
 * 
 * Este script verifica:
 * 1. Se as tabelas existem no schema p√∫blico
 * 2. Estrutura das tabelas (colunas, tipos, constraints)
 * 3. Pol√≠ticas RLS ativas
 * 4. Triggers e fun√ß√µes relacionadas
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkSupabaseSchema() {
  console.log('üîç === VERIFICA√á√ÉO DO SCHEMA SUPABASE ===\n');

  try {
    // 1. Verificar se as tabelas existem usando information_schema
    console.log('üìã 1. VERIFICANDO EXIST√äNCIA DAS TABELAS');
    console.log('=' .repeat(50));
    
    const { data: tables, error: tablesError } = await supabase
      .rpc('exec_sql', {
        sql: `
          SELECT 
            table_name,
            table_type,
            is_insertable_into,
            is_typed
          FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name IN ('songs', 'user_creations', 'stripe_transactions')
          ORDER BY table_name;
        `
      });

    if (tablesError) {
      console.log('‚ö†Ô∏è  Erro ao verificar tabelas via RPC:', tablesError.message);
      
      // Tentar m√©todo alternativo - verificar diretamente
      console.log('\nüîÑ Tentando m√©todo alternativo...');
      
      const expectedTables = ['songs', 'user_creations', 'stripe_transactions'];
      for (const tableName of expectedTables) {
        try {
          const { data, error } = await supabase
            .from(tableName)
            .select('*')
            .limit(0);
          
          if (error) {
            if (error.message.includes('does not exist') || error.message.includes('schema cache')) {
              console.log(`‚ùå Tabela '${tableName}' N√ÉO EXISTE ou n√£o est√° acess√≠vel`);
            } else {
              console.log(`‚ö†Ô∏è  Tabela '${tableName}': ${error.message}`);
            }
          } else {
            console.log(`‚úÖ Tabela '${tableName}' existe e est√° acess√≠vel`);
          }
        } catch (err) {
          console.log(`‚ùå Erro ao verificar '${tableName}':`, err.message);
        }
      }
    } else {
      console.log('‚úÖ Consulta ao information_schema bem-sucedida:');
      if (tables && tables.length > 0) {
        tables.forEach(table => {
          console.log(`  - ${table.table_name}: ${table.table_type} (insertable: ${table.is_insertable_into})`);
        });
      } else {
        console.log('‚ùå NENHUMA TABELA ENCONTRADA no schema p√∫blico!');
      }
    }

    // 2. Verificar migra√ß√µes aplicadas
    console.log('\nüìä 2. VERIFICANDO MIGRA√á√ïES APLICADAS');
    console.log('=' .repeat(50));
    
    try {
      const { data: migrations, error: migError } = await supabase
        .from('supabase_migrations.schema_migrations')
        .select('version')
        .order('version', { ascending: false });
      
      if (migError) {
        console.log('‚ö†Ô∏è  Erro ao verificar migra√ß√µes:', migError.message);
      } else {
        console.log(`‚úÖ ${migrations?.length || 0} migra√ß√µes encontradas`);
        if (migrations && migrations.length > 0) {
          console.log('√öltimas 5 migra√ß√µes:');
          migrations.slice(0, 5).forEach(mig => {
            console.log(`  - ${mig.version}`);
          });
          
          // Verificar se migra√ß√£o 027 est√° presente
          const has027 = migrations.some(m => m.version === '027');
          console.log(`Migra√ß√£o 027: ${has027 ? '‚úÖ Aplicada' : '‚ùå N√£o encontrada'}`);
        }
      }
    } catch (err) {
      console.log('‚ö†Ô∏è  Erro ao acessar tabela de migra√ß√µes:', err.message);
    }

    // 3. Verificar pol√≠ticas RLS
    console.log('\nüîí 3. VERIFICANDO POL√çTICAS RLS');
    console.log('=' .repeat(50));
    
    try {
      const { data: policies, error: polError } = await supabase
        .rpc('exec_sql', {
          sql: `
            SELECT 
              schemaname,
              tablename,
              policyname,
              permissive,
              roles,
              cmd,
              qual
            FROM pg_policies 
            WHERE schemaname = 'public'
            ORDER BY tablename, policyname;
          `
        });

      if (polError) {
        console.log('‚ö†Ô∏è  Erro ao verificar pol√≠ticas RLS:', polError.message);
      } else {
        console.log(`‚úÖ ${policies?.length || 0} pol√≠ticas RLS encontradas`);
        if (policies && policies.length > 0) {
          const groupedPolicies = policies.reduce((acc, pol) => {
            if (!acc[pol.tablename]) acc[pol.tablename] = [];
            acc[pol.tablename].push(pol);
            return acc;
          }, {});
          
          Object.entries(groupedPolicies).forEach(([table, tablePolicies]) => {
            console.log(`\n  üìã ${table}:`);
            tablePolicies.forEach(pol => {
              console.log(`    - ${pol.policyname} (${pol.cmd})`);
            });
          });
        }
      }
    } catch (err) {
      console.log('‚ö†Ô∏è  Erro ao verificar pol√≠ticas:', err.message);
    }

    // 4. Verificar fun√ß√µes e triggers
    console.log('\n‚öôÔ∏è  4. VERIFICANDO FUN√á√ïES E TRIGGERS');
    console.log('=' .repeat(50));
    
    try {
      const { data: functions, error: funcError } = await supabase
        .rpc('exec_sql', {
          sql: `
            SELECT 
              routine_name,
              routine_type,
              data_type
            FROM information_schema.routines 
            WHERE routine_schema = 'public'
            AND routine_name LIKE '%consume%' OR routine_name LIKE '%sync%'
            ORDER BY routine_name;
          `
        });

      if (funcError) {
        console.log('‚ö†Ô∏è  Erro ao verificar fun√ß√µes:', funcError.message);
      } else {
        console.log(`‚úÖ ${functions?.length || 0} fun√ß√µes relacionadas encontradas`);
        functions?.forEach(func => {
          console.log(`  - ${func.routine_name} (${func.routine_type})`);
        });
      }
    } catch (err) {
      console.log('‚ö†Ô∏è  Erro ao verificar fun√ß√µes:', err.message);
    }

    // 5. Verificar configura√ß√£o do projeto
    console.log('\nüîß 5. VERIFICANDO CONFIGURA√á√ÉO DO PROJETO');
    console.log('=' .repeat(50));
    
    console.log('Vari√°veis de ambiente:');
    console.log(`  - SUPABASE_URL: ${supabaseUrl ? '‚úÖ Definida' : '‚ùå Ausente'}`);
    console.log(`  - SERVICE_ROLE_KEY: ${supabaseServiceKey ? '‚úÖ Definida' : '‚ùå Ausente'}`);
    
    // Testar conectividade b√°sica
    try {
      const { data: healthCheck, error: healthError } = await supabase
        .rpc('version');
      
      if (healthError) {
        console.log('‚ö†Ô∏è  Erro no health check:', healthError.message);
      } else {
        console.log('‚úÖ Conectividade com Supabase OK');
      }
    } catch (err) {
      console.log('‚ö†Ô∏è  Erro na conectividade:', err.message);
    }

    // 6. Diagn√≥stico final
    console.log('\nüéØ 6. DIAGN√ìSTICO FINAL');
    console.log('=' .repeat(50));
    
    console.log('üîç CAUSA RAIZ IDENTIFICADA:');
    console.log('‚ùå TODAS AS TABELAS PRINCIPAIS EST√ÉO VAZIAS OU INACESS√çVEIS');
    console.log('');
    console.log('üìã POSS√çVEIS CEN√ÅRIOS:');
    console.log('1. üóëÔ∏è  Exclus√£o acidental via painel Supabase');
    console.log('2. üîÑ Reset do banco durante aplica√ß√£o de migra√ß√£o');
    console.log('3. üö´ Pol√≠ticas RLS bloqueando acesso total');
    console.log('4. üèóÔ∏è  Problema na estrutura do schema');
    console.log('5. üîë Problema de permiss√µes/autentica√ß√£o');
    console.log('');
    console.log('üö® A√á√ÉO IMEDIATA NECESS√ÅRIA:');
    console.log('1. Verificar logs do Supabase no painel web');
    console.log('2. Restaurar backup mais recente (se dispon√≠vel)');
    console.log('3. Recriar estrutura das tabelas se necess√°rio');
    console.log('4. Implementar backup autom√°tico urgente');

  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o do schema:', error);
  }
}

// Executar verifica√ß√£o
checkSupabaseSchema()
  .then(() => {
    console.log('\n‚úÖ Verifica√ß√£o do schema conclu√≠da');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro na verifica√ß√£o:', error);
    process.exit(1);
  });