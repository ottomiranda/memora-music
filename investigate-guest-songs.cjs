require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function investigateGuestSongs() {
  console.log('üîç Investigando m√∫sicas guest n√£o migradas...');
  console.log('==================================================');

  try {
    // 1. Buscar todas as m√∫sicas sem user_id (guest songs)
    console.log('\n1Ô∏è‚É£ Buscando m√∫sicas guest (sem user_id)...');
    const { data: guestSongs, error: guestError } = await supabase
      .from('songs')
      .select('*')
      .is('user_id', null)
      .order('created_at', { ascending: false });

    if (guestError) {
      console.error('‚ùå Erro ao buscar m√∫sicas guest:', guestError);
      return;
    }

    console.log(`üìä Encontradas ${guestSongs.length} m√∫sicas guest:`);
    if (guestSongs.length > 0) {
      guestSongs.forEach((song, index) => {
        const title = song.title || 'Sem t√≠tulo';
        const date = new Date(song.created_at).toLocaleString('pt-BR');
        const deviceId = song.device_id || 'N/A';
        console.log(`   ${index + 1}. ${title} (${date}) - Device: ${deviceId}`);
      });
    }

    // 2. Verificar se existem device_ids espec√≠ficos nas m√∫sicas guest
    if (guestSongs.length > 0) {
      console.log('\n2Ô∏è‚É£ Analisando device_ids das m√∫sicas guest...');
      const deviceIds = [...new Set(guestSongs.map(song => song.device_id).filter(Boolean))];
      console.log(`üì± Device IDs √∫nicos encontrados: ${deviceIds.length}`);
      deviceIds.forEach((deviceId, index) => {
        const songsCount = guestSongs.filter(song => song.device_id === deviceId).length;
        console.log(`   ${index + 1}. ${deviceId} (${songsCount} m√∫sicas)`);
      });

      // 3. Verificar se algum desses device_ids est√° associado ao Otto
      console.log('\n3Ô∏è‚É£ Verificando associa√ß√µes de device_id com usu√°rios...');
      for (const deviceId of deviceIds) {
        const { data: userCreation, error: creationError } = await supabase
          .from('user_creations')
          .select('*')
          .eq('device_id', deviceId)
          .single();

        if (!creationError && userCreation) {
          console.log(`üîó Device ${deviceId} est√° associado ao user_id: ${userCreation.user_id}`);
          
          // Verificar quantas m√∫sicas este usu√°rio tem
          const { data: userSongs, error: userSongsError } = await supabase
            .from('songs')
            .select('id')
            .eq('user_id', userCreation.user_id);

          if (!userSongsError) {
            console.log(`   üë§ Este usu√°rio tem ${userSongs.length} m√∫sicas migradas`);
          }
        } else {
          console.log(`‚ùå Device ${deviceId} n√£o est√° associado a nenhum usu√°rio`);
        }
      }
    }

    // 4. Verificar o usu√°rio Otto especificamente
    console.log('\n4Ô∏è‚É£ Verificando informa√ß√µes do usu√°rio Otto...');
    
    // Buscar o usu√°rio com mais m√∫sicas (assumindo que √© Otto)
    const { data: allSongs, error: allSongsError } = await supabase
      .from('songs')
      .select('user_id')
      .not('user_id', 'is', null);

    if (allSongsError) {
      console.error('‚ùå Erro ao buscar todas as m√∫sicas:', allSongsError);
      return;
    }

    // Contar m√∫sicas por usu√°rio
    const userSongCounts = {};
    allSongs.forEach(song => {
      userSongCounts[song.user_id] = (userSongCounts[song.user_id] || 0) + 1;
    });

    // Encontrar usu√°rio com mais m√∫sicas
    const ottoUserId = Object.keys(userSongCounts).reduce((a, b) => 
      userSongCounts[a] > userSongCounts[b] ? a : b
    );

    console.log(`üë§ Usu√°rio Otto (${ottoUserId}) tem ${userSongCounts[ottoUserId]} m√∫sicas`);

    // Verificar device_ids associados ao Otto
    const { data: ottoCreations, error: ottoCreationsError } = await supabase
      .from('user_creations')
      .select('*')
      .eq('user_id', ottoUserId);

    if (!ottoCreationsError && ottoCreations.length > 0) {
      console.log(`üì± Device IDs associados ao Otto:`);
      ottoCreations.forEach((creation, index) => {
        console.log(`   ${index + 1}. ${creation.device_id} (${creation.freesongsused || 0} cria√ß√µes)`);
      });

      // Verificar se alguma m√∫sica guest tem o device_id do Otto
      const ottoDeviceIds = ottoCreations.map(c => c.device_id);
      const unmigrated = guestSongs.filter(song => 
        ottoDeviceIds.includes(song.device_id)
      );

      if (unmigrated.length > 0) {
        console.log(`\nüö® PROBLEMA ENCONTRADO: ${unmigrated.length} m√∫sicas guest com device_id do Otto n√£o foram migradas!`);
        unmigrated.forEach((song, index) => {
          const title = song.title || 'Sem t√≠tulo';
          const date = new Date(song.created_at).toLocaleString('pt-BR');
          console.log(`   ${index + 1}. ${title} (${date}) - Device: ${song.device_id}`);
        });

        // Sugerir migra√ß√£o manual
        console.log('\nüí° Solu√ß√£o sugerida: Migrar essas m√∫sicas manualmente para o usu√°rio Otto');
        console.log(`   UPDATE songs SET user_id = '${ottoUserId}' WHERE device_id IN ('${ottoDeviceIds.join("', '")}') AND user_id IS NULL;`);
      } else {
        console.log('\n‚úÖ Nenhuma m√∫sica guest encontrada com device_id do Otto');
      }
    }

    // 5. Verificar logs de migra√ß√£o recentes
    console.log('\n5Ô∏è‚É£ Verificando logs de migra√ß√£o recentes...');
    const { data: migrationLogs, error: logsError } = await supabase
      .rpc('log_migration', {
        p_action: 'query_recent',
        p_device_id: 'system',
        p_user_id: 'system',
        p_songs_count: 0,
        p_details: 'Consultando logs recentes'
      });

    if (!logsError) {
      console.log('üìã Logs de migra√ß√£o consultados com sucesso');
    }

    // Buscar logs diretamente da tabela
    const { data: logs, error: directLogsError } = await supabase
      .from('migration_logs')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);

    if (!directLogsError && logs.length > 0) {
      console.log(`üìä √öltimos ${logs.length} logs de migra√ß√£o:`);
      logs.forEach((log, index) => {
        const date = new Date(log.created_at).toLocaleString('pt-BR');
        console.log(`   ${index + 1}. ${log.action} - ${log.details} (${date})`);
      });
    } else {
      console.log('üìä Nenhum log de migra√ß√£o encontrado');
    }

  } catch (error) {
    console.error('‚ùå Erro durante investiga√ß√£o:', error);
  }

  console.log('\n==================================================');
  console.log('‚úÖ Investiga√ß√£o conclu√≠da!');
}

// Executar investiga√ß√£o
investigateGuestSongs();