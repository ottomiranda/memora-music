#!/usr/bin/env node
/**
 * Teste espec√≠fico para verificar o bloqueio da segunda m√∫sica
 * Testa se o sistema bloqueia corretamente a cria√ß√£o da segunda m√∫sica
 * com o mesmo device_id via IP da rede local (192.168.0.105:5173)
 */

require('dotenv').config();
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

// Configura√ß√£o do teste
const BASE_URL = 'http://localhost:3337';
const API_URL = `${BASE_URL}/api`;

// Payload base para testes
const basePayload = {
  occasion: 'aniversario',
  recipientName: 'Jo√£o',
  relationship: 'amigo',
  senderName: 'Maria',
  hobbies: 'Gosta de futebol e m√∫sica',
  qualities: 'Pessoa alegre e carinhosa',
  uniqueTraits: 'Tem um sorriso contagiante',
  memories: 'Lembro quando jogamos futebol juntos no parque',
  lyricsOnly: true,
  songTitle: 'M√∫sica para Jo√£o',
  emotionalTone: 'alegre',
  genre: 'pop',
  mood: 'feliz',
  tempo: 'medio',
  duration: '3:00',
  emotion: 'alegria',
  vocalPreference: 'masculina'
};

async function testSecondSongBlock() {
  console.log('üß™ TESTE DE BLOQUEIO DA SEGUNDA M√öSICA');
  console.log('================================================================================');
  console.log(`üåê Testando via IP da rede: ${BASE_URL}`);
  console.log('');

  // Gerar IDs √∫nicos para este teste
  const deviceId = `device_${uuidv4()}`;
  const guestId = `guest_${uuidv4()}`;
  
  console.log(`üì± Device ID: ${deviceId}`);
  console.log(`üë§ Guest ID: ${guestId}`);
  console.log('');

  try {
    // PRIMEIRA M√öSICA - Deve passar
    console.log('üìã TESTE 1: Primeira m√∫sica (deve passar)');
    console.log('--------------------------------------------------------------------------------');
    
    const firstSongPayload = {
      ...basePayload,
      lyrics: 'Primeira m√∫sica de teste para verificar o sistema de paywall.',
      userId: null,
      deviceId: deviceId,
      guestId: guestId
    };

    const firstResponse = await axios.post(`${API_URL}/generate-preview`, firstSongPayload, {
      headers: {
        'Content-Type': 'application/json',
        'X-Forwarded-For': '192.168.0.105',
        'X-Device-ID': deviceId,
        'X-Guest-ID': guestId
      },
      timeout: 30000
    });

    console.log(`‚úÖ Primeira m√∫sica criada com sucesso!`);
    console.log(`üìä Status: ${firstResponse.status}`);
    console.log(`üìù Resposta: ${JSON.stringify(firstResponse.data, null, 2).substring(0, 200)}...`);
    console.log('');

    // Aguardar um pouco antes da segunda requisi√ß√£o
    console.log('‚è≥ Aguardando 2 segundos antes da segunda requisi√ß√£o...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // SEGUNDA M√öSICA - Deve ser bloqueada
    console.log('üìã TESTE 2: Segunda m√∫sica com mesmo device_id (deve ser bloqueada)');
    console.log('--------------------------------------------------------------------------------');
    
    const secondSongPayload = {
      ...basePayload,
      lyrics: 'Segunda m√∫sica de teste - esta deve ser bloqueada pelo paywall.',
      userId: null,
      deviceId: deviceId, // Mesmo device_id
      guestId: guestId    // Mesmo guest_id
    };

    try {
      const secondResponse = await axios.post(`${API_URL}/generate-preview`, secondSongPayload, {
        headers: {
          'Content-Type': 'application/json',
          'X-Forwarded-For': '192.168.0.105',
          'X-Device-ID': deviceId,
          'X-Guest-ID': guestId
        },
        timeout: 30000
      });

      // Se chegou aqui, a segunda m√∫sica passou - isso √© um problema!
      console.log('‚ùå FALHA DE SEGURAN√áA: Segunda m√∫sica foi criada quando deveria ser bloqueada!');
      console.log(`üìä Status: ${secondResponse.status}`);
      console.log(`üìù Resposta: ${JSON.stringify(secondResponse.data, null, 2)}`);
      
    } catch (secondError) {
      if (secondError.response) {
        const status = secondError.response.status;
        const data = secondError.response.data;
        
        if (status === 402 || status === 403 || (data && data.message && data.message.includes('pago'))) {
          console.log('‚úÖ BLOQUEIO FUNCIONANDO: Segunda m√∫sica foi corretamente bloqueada!');
          console.log(`üìä Status: ${status}`);
          console.log(`üìù Mensagem: ${data.message || 'Bloqueio por paywall'}`);
        } else {
          console.log('‚ö†Ô∏è  Segunda m√∫sica foi bloqueada, mas com status inesperado:');
          console.log(`üìä Status: ${status}`);
          console.log(`üìù Resposta: ${JSON.stringify(data, null, 2)}`);
        }
      } else {
        console.log('‚ùå Erro de rede na segunda requisi√ß√£o:', secondError.message);
      }
    }

    console.log('');

    // TESTE 3: Verificar status do paywall
    console.log('üìã TESTE 3: Verificar status atual do paywall');
    console.log('--------------------------------------------------------------------------------');
    
    try {
      const statusResponse = await axios.get(`${API_URL}/paywall/creation-status`, {
        params: {
          userId: null,
          deviceId: deviceId,
          guestId: guestId
        },
        headers: {
          'X-Forwarded-For': '192.168.0.105',
          'X-Device-ID': deviceId,
          'X-Guest-ID': guestId
        }
      });

      console.log('üìä Status do paywall:');
      console.log(JSON.stringify(statusResponse.data, null, 2));
      
      const data = statusResponse.data;
      if (data.freeSongsUsed >= 1) {
        console.log('‚úÖ Contador de m√∫sicas gratuitas foi incrementado corretamente');
      } else {
        console.log('‚ö†Ô∏è  Contador de m√∫sicas gratuitas n√£o foi incrementado');
      }
      
    } catch (statusError) {
      console.log('‚ùå Erro ao verificar status do paywall:', statusError.message);
    }

  } catch (error) {
    console.log('‚ùå Erro na primeira requisi√ß√£o:', error.message);
    if (error.response) {
      console.log(`üìä Status: ${error.response.status}`);
      console.log(`üìù Resposta: ${JSON.stringify(error.response.data, null, 2)}`);
    }
  }

  console.log('');
  console.log('================================================================================');
  console.log('üéØ CONCLUS√ïES DO TESTE');
  console.log('================================================================================');
  console.log('1. Se a primeira m√∫sica passou e a segunda foi bloqueada = ‚úÖ Sistema funcionando');
  console.log('2. Se ambas passaram = ‚ùå Falha de seguran√ßa - usu√°rios podem burlar o sistema');
  console.log('3. Se a primeira foi bloqueada = ‚ö†Ô∏è  Problema na configura√ß√£o inicial');
  console.log(`4. IP testado: 192.168.0.105`);
  console.log(`5. Device ID usado: ${deviceId}`);
}

// Executar o teste
testSecondSongBlock().catch(console.error);