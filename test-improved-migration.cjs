#!/usr/bin/env node

/**
 * Script para testar o sistema de migra√ß√£o melhorado
 * Testa as novas fun√ß√µes RPC criadas
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

/**
 * Fun√ß√£o para testar detec√ß√£o de m√∫sicas √≥rf√£s
 */
async function testOrphanDetection() {
  console.log('üîç Testando detec√ß√£o de m√∫sicas √≥rf√£s...');
  
  try {
    const { data: orphanData, error } = await supabase
      .rpc('detect_orphan_songs');

    if (error) {
      console.error('‚ùå Erro ao detectar √≥rf√£s:', error);
      return null;
    }

    console.log('üìä Resultado da detec√ß√£o:', orphanData);
    return orphanData;
  } catch (err) {
    console.error('‚ùå Erro na detec√ß√£o:', err);
    return null;
  }
}

/**
 * Fun√ß√£o para testar migra√ß√£o melhorada
 */
async function testImprovedMigration() {
  console.log('üß™ Testando migra√ß√£o melhorada...');
  
  try {
    // Buscar Otto Miranda
    const { data: users, error: userError } = await supabase
      .rpc('get_users_by_email_or_name', { search_term: 'Otto Miranda' });
    
    const ottoUser = users && users.length > 0 ? users[0] : null;

    if (userError || !ottoUser) {
      console.error('‚ùå Erro ao buscar Otto Miranda:', userError);
      return;
    }

    console.log(`üë§ Usu√°rio encontrado: ${ottoUser.name} (${ottoUser.id})`);

    // Testar a fun√ß√£o de migra√ß√£o melhorada (sem guest_ids espec√≠ficos para detectar automaticamente)
    const { data: migrationResult, error: migrationError } = await supabase
      .rpc('migrate_orphan_songs_to_user', {
        p_user_id: ottoUser.id
        // p_guest_ids ser√° null, ent√£o a fun√ß√£o detectar√° automaticamente
      });

    if (migrationError) {
      console.error('‚ùå Erro na migra√ß√£o:', migrationError);
      return;
    }

    console.log('üìä Resultado da migra√ß√£o:', migrationResult);

    // Registrar log da migra√ß√£o
    if (migrationResult.success) {
      const { data: logId, error: logError } = await supabase
        .rpc('log_migration', {
          p_user_id: ottoUser.id,
          p_guest_ids: migrationResult.guest_ids_processed || [],
          p_migrated_count: migrationResult.migrated_count,
          p_migration_type: 'test_auto',
          p_success: true
        });

      if (logError) {
        console.warn('‚ö†Ô∏è Erro ao registrar log:', logError);
      } else {
        console.log('üìù Log de migra√ß√£o registrado:', logId);
      }
    }

    return migrationResult;
  } catch (err) {
    console.error('‚ùå Erro no teste:', err);
    return null;
  }
}

/**
 * Fun√ß√£o para verificar logs de migra√ß√£o
 */
async function checkMigrationLogs() {
  console.log('üìã Verificando logs de migra√ß√£o...');
  
  try {
    const { data: logs, error } = await supabase
      .from('migration_logs')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);

    if (error) {
      console.error('‚ùå Erro ao buscar logs:', error);
      return;
    }

    console.log(`üìä Encontrados ${logs.length} logs de migra√ß√£o:`);
    logs.forEach((log, index) => {
      console.log(`  ${index + 1}. ${log.created_at} - Usu√°rio: ${log.user_id}`);
      console.log(`     Tipo: ${log.migration_type}, Migradas: ${log.migrated_count}, Sucesso: ${log.success}`);
      if (log.guest_ids && log.guest_ids.length > 0) {
        console.log(`     Guest IDs: ${log.guest_ids.join(', ')}`);
      }
      if (log.error_message) {
        console.log(`     Erro: ${log.error_message}`);
      }
      console.log('');
    });
  } catch (err) {
    console.error('‚ùå Erro ao verificar logs:', err);
  }
}

/**
 * Fun√ß√£o para verificar status atual do Otto
 */
async function checkOttoStatus() {
  console.log('üë§ Verificando status atual do Otto...');
  
  try {
    // Buscar todas as m√∫sicas e agrupar por user_id para encontrar Otto
    const { data: songs, error: songsError } = await supabase
      .from('songs')
      .select('user_id')
      .not('user_id', 'is', null);

    if (songsError) {
      console.error('‚ùå Erro ao buscar m√∫sicas:', songsError);
      return;
    }
    
    // Contar m√∫sicas por user_id
    const userSongCounts = {};
    songs.forEach(song => {
      if (song.user_id) {
        userSongCounts[song.user_id] = (userSongCounts[song.user_id] || 0) + 1;
      }
    });
    
    // Encontrar o user_id com mais m√∫sicas (provavelmente Otto)
    let ottoUserId = null;
    let maxSongs = 0;
    
    for (const [userId, count] of Object.entries(userSongCounts)) {
      if (count > maxSongs) {
        maxSongs = count;
        ottoUserId = userId;
      }
    }
    
    if (!ottoUserId) {
      console.log('‚ùå Nenhum usu√°rio com m√∫sicas encontrado');
      return;
    }
    
    console.log(`üë§ Usu√°rio com mais m√∫sicas encontrado: ${ottoUserId} (${maxSongs} m√∫sicas)`);

    // Contar m√∫sicas do usu√°rio
    const { data: userSongs, error: userSongsError } = await supabase
      .from('songs')
      .select('id, title, created_at')
      .eq('user_id', ottoUserId)
      .order('created_at', { ascending: false });

    if (userSongsError) {
      console.error('‚ùå Erro ao buscar m√∫sicas do usu√°rio:', userSongsError);
      return;
    }

    console.log(`üéµ Usu√°rio tem ${userSongs.length} m√∫sicas:`);
    userSongs.slice(0, 5).forEach((song, index) => {
      const title = song.title || 'Sem t√≠tulo';
      const date = new Date(song.created_at).toLocaleString('pt-BR');
      console.log(`   ${index + 1}. ${title} (${date})`);
    });
    
    if (userSongs.length > 5) {
      console.log(`  ... e mais ${userSongs.length - 5} m√∫sicas`);
    }

    // Verificar user_creations
    const { data: creationsData, error: creationsError } = await supabase
      .from('user_creations')
      .select('*')
      .eq('user_id', ottoUserId)
      .single();

    if (creationsError) {
      console.warn('‚ö†Ô∏è Erro ao buscar user_creations:', creationsError);
    } else {
      console.log(`üìä Contador de cria√ß√µes: ${creationsData.freesongsused || 0}`);
    }

  } catch (err) {
    console.error('‚ùå Erro ao verificar status:', err);
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  console.log('üöÄ Testando sistema de migra√ß√£o melhorado...');
  console.log('=' .repeat(50));
  
  try {
    // 1. Verificar status atual do Otto
    await checkOttoStatus();
    console.log('\n' + '-'.repeat(50) + '\n');
    
    // 2. Detectar m√∫sicas √≥rf√£s
    const orphanData = await testOrphanDetection();
    console.log('\n' + '-'.repeat(50) + '\n');
    
    // 3. Testar migra√ß√£o melhorada (s√≥ se houver √≥rf√£s)
    if (orphanData && orphanData.has_orphans) {
      await testImprovedMigration();
    } else {
      console.log('‚ÑπÔ∏è Nenhuma m√∫sica √≥rf√£ encontrada. Pulando teste de migra√ß√£o.');
    }
    console.log('\n' + '-'.repeat(50) + '\n');
    
    // 4. Verificar logs de migra√ß√£o
    await checkMigrationLogs();
    
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ Teste do sistema melhorado conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro no processo:', error);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = {
  testOrphanDetection,
  testImprovedMigration,
  checkMigrationLogs,
  checkOttoStatus
};