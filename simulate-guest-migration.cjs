require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const { v4: uuidv4 } = require('uuid');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function simulateGuestMigration() {
  console.log('üé≠ Simulando cen√°rio de migra√ß√£o guest ‚Üí usu√°rio...');
  console.log('==================================================');

  try {
    // 1. Identificar Otto
    const { data: allSongs, error: allSongsError } = await supabase
      .from('songs')
      .select('user_id')
      .not('user_id', 'is', null);

    if (allSongsError) {
      console.error('‚ùå Erro ao buscar todas as m√∫sicas:', allSongsError);
      return;
    }

    const userSongCounts = {};
    allSongs.forEach(song => {
      userSongCounts[song.user_id] = (userSongCounts[song.user_id] || 0) + 1;
    });

    const ottoUserId = Object.keys(userSongCounts).reduce((a, b) => 
      userSongCounts[a] > userSongCounts[b] ? a : b
    );

    console.log(`üë§ Otto identificado: ${ottoUserId}`);

    // 2. Gerar um device_id √∫nico para simular um dispositivo guest
    const guestDeviceId = uuidv4();
    console.log(`üì± Device ID guest simulado: ${guestDeviceId}`);

    // 3. Criar 2 m√∫sicas como guest (sem user_id)
    console.log('\nüéµ Criando 2 m√∫sicas como guest...');
    
    const guestSong1 = {
      id: uuidv4(),
      title: 'M√∫sica Guest 1 - Teste de Migra√ß√£o',
      guest_id: guestDeviceId,
      user_id: null, // Guest song
      lyrics: 'Esta √© uma m√∫sica criada como guest para testar a migra√ß√£o',
      prompt: 'Teste de migra√ß√£o de m√∫sica guest',
      genre: 'pop',
      mood: 'happy',
      audio_url_option1: 'https://example.com/guest-song-1.mp3',
      image_url: 'https://example.com/guest-song-1.jpg',
      generation_status: 'completed'
    };

    const guestSong2 = {
      id: uuidv4(),
      title: 'M√∫sica Guest 2 - Teste de Migra√ß√£o',
      guest_id: guestDeviceId,
      user_id: null, // Guest song
      lyrics: 'Esta √© a segunda m√∫sica criada como guest para testar a migra√ß√£o',
      prompt: 'Segundo teste de migra√ß√£o de m√∫sica guest',
      genre: 'rock',
      mood: 'energetic',
      audio_url_option1: 'https://example.com/guest-song-2.mp3',
      image_url: 'https://example.com/guest-song-2.jpg',
      generation_status: 'completed'
    };

    // Inserir as m√∫sicas guest
    const { error: insertError } = await supabase
      .from('songs')
      .insert([guestSong1, guestSong2]);

    if (insertError) {
      console.error('‚ùå Erro ao criar m√∫sicas guest:', insertError);
      return;
    }

    console.log('‚úÖ 2 m√∫sicas guest criadas com sucesso!');
    console.log(`   1. ${guestSong1.title} (${guestSong1.id})`);
    console.log(`   2. ${guestSong2.title} (${guestSong2.id})`);

    // 4. Simular login do Otto com o device_id guest (UPDATE do registro existente)
    console.log('\nüë§ Simulando login do Otto com o device_id guest...');
    const { error: loginError } = await supabase
      .from('user_creations')
      .update({
        user_id: ottoUserId,
        last_used_ip: '192.168.1.100',
        updated_at: new Date().toISOString()
      })
      .eq('device_id', guestDeviceId);

    if (loginError) {
      console.error('‚ùå Erro ao atualizar user_creation:', loginError);
      return;
    }
    console.log('‚úÖ Login simulado com sucesso!');

    // 5. Verificar se as m√∫sicas √≥rf√£s s√£o detectadas
    console.log('\nüîç Testando detec√ß√£o de m√∫sicas √≥rf√£s...');
    
    const { data: orphanResult, error: orphanError } = await supabase
      .rpc('detect_orphan_songs');

    if (orphanError) {
      console.error('‚ùå Erro ao detectar m√∫sicas √≥rf√£s:', orphanError);
    } else {
      console.log('üìä Resultado da detec√ß√£o:', orphanResult);
      
      if (orphanResult.has_orphans) {
        console.log(`üéµ ${orphanResult.orphan_count} m√∫sicas √≥rf√£s detectadas!`);
        console.log(`üì± Device IDs guest: ${orphanResult.guest_ids.join(', ')}`);
      } else {
        console.log('‚ùå Nenhuma m√∫sica √≥rf√£ detectada - pode haver problema na fun√ß√£o');
      }
    }

    // 6. Simular migra√ß√£o das m√∫sicas √≥rf√£s para o usu√°rio Otto
    console.log('\nüîÑ Migrando m√∫sicas √≥rf√£s para o usu√°rio Otto...');
    
    const { data: migratedSongs, error: migrationError } = await supabase
      .from('songs')
      .update({ 
        user_id: ottoUserId,
        guest_id: null, // Limpar guest_id ap√≥s migra√ß√£o
        updated_at: new Date().toISOString()
      })
      .eq('guest_id', guestDeviceId)
      .is('user_id', null)
      .select();

    if (migrationError) {
      console.error('‚ùå Erro na migra√ß√£o:', migrationError);
    } else {
      console.log(`‚úÖ ${migratedSongs.length} m√∫sicas migradas com sucesso!`);
      migratedSongs.forEach(song => {
        console.log(`   - ${song.title} agora pertence ao usu√°rio ${ottoUserId}`);
      });
    }

    // 7. Verificar se as m√∫sicas foram realmente migradas
    console.log('\n‚úÖ Verificando resultado da migra√ß√£o...');
    
    const { data: verifiedSongs, error: verifiedError } = await supabase
      .from('songs')
      .select('*')
      .eq('user_id', ottoUserId)
      .in('id', [guestSong1.id, guestSong2.id]);

    if (verifiedError) {
      console.error('‚ùå Erro ao verificar m√∫sicas migradas:', verifiedError);
    } else {
      console.log(`üéµ ${verifiedSongs.length} m√∫sicas encontradas com user_id do Otto:`);
      verifiedSongs.forEach((song, index) => {
        console.log(`   ${index + 1}. ${song.title} (${song.id})`);
        console.log(`      üë§ User ID: ${song.user_id}`);
        console.log(`      üì± Guest ID: ${song.guest_id}`);
      });
    }

    // 8. Verificar se ainda existem m√∫sicas guest
    const { data: remainingGuest, error: remainingError } = await supabase
      .from('songs')
      .select('*')
      .is('user_id', null)
      .eq('guest_id', guestDeviceId);

    if (!remainingError) {
      if (remainingGuest.length > 0) {
        console.log(`‚ö†Ô∏è ${remainingGuest.length} m√∫sicas ainda est√£o como guest (migra√ß√£o incompleta)`);
        remainingGuest.forEach((song, index) => {
          console.log(`   ${index + 1}. ${song.title} (${song.id})`);
        });
      } else {
        console.log('‚úÖ Nenhuma m√∫sica guest restante - migra√ß√£o completa!');
      }
    }

    // Verificar m√∫sicas guest ainda n√£o migradas
    const { data: remainingSongs, error: remainingError2 } = await supabase
      .from('songs')
      .select('*')
      .is('user_id', null)
      .eq('guest_id', guestDeviceId);

    if (!remainingError2) {
      console.log(`üîç ${remainingSongs.length} m√∫sicas guest ainda n√£o migradas`);
      if (remainingSongs.length > 0) {
        console.log('‚ö†Ô∏è  Poss√≠vel problema na migra√ß√£o autom√°tica!');
        remainingSongs.forEach(song => {
          console.log(`   - ${song.title} (Guest ID: ${song.guest_id})`);
        });
      }
    }

    // 9. Verificar logs de migra√ß√£o
    console.log('\nüìã Verificando logs de migra√ß√£o...');
    const { data: logs, error: logsError } = await supabase
      .from('migration_logs')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);

    if (!logsError && logs && logs.length > 0) {
      console.log(`üìä √öltimos ${logs.length} logs:`);
      logs.forEach((log, index) => {
        const date = new Date(log.created_at).toLocaleString('pt-BR');
        console.log(`   ${index + 1}. ${log.action} - ${log.details} (${date})`);
      });
    } else {
      console.log('üìä Nenhum log de migra√ß√£o encontrado');
    }

    console.log('\nüßπ Limpeza: Removendo dados de teste...');
    
    // Remover as m√∫sicas de teste
    await supabase
      .from('songs')
      .delete()
      .in('id', [guestSong1.id, guestSong2.id]);
    
    // Remover a user_creation de teste
    await supabase
      .from('user_creations')
      .delete()
      .eq('device_id', guestDeviceId);
    
    console.log('‚úÖ Dados de teste removidos');

  } catch (error) {
    console.error('‚ùå Erro durante simula√ß√£o:', error);
  }

  console.log('\n==================================================');
  console.log('‚úÖ Simula√ß√£o conclu√≠da!');
}

// Executar simula√ß√£o
simulateGuestMigration();