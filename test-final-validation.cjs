require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testFinalValidation() {
  console.log('üéØ TESTE FINAL: Valida√ß√£o completa do problema resolvido');
  console.log('üìã Cen√°rio: Usu√°rio cria m√∫sica gratuita ‚Üí faz login ‚Üí tenta segunda m√∫sica');
  
  try {
    const testDeviceId = `final-test-${Date.now()}`;
    const testEmail = `final-test-${Date.now()}@example.com`;
    
    console.log('\nüéµ PASSO 1: Usu√°rio an√¥nimo cria primeira m√∫sica (gratuita)');
    
    // Simular cria√ß√£o de usu√°rio an√¥nimo ap√≥s primeira m√∫sica
    const { data: guestUser, error: guestError } = await supabase
      .from('user_creations')
      .insert({
        device_id: testDeviceId,
        status: 1, // an√¥nimo
        freesongsused: 1 // primeira m√∫sica usada
      })
      .select()
      .single();
    
    if (guestError) {
      console.error('‚ùå Erro ao criar usu√°rio an√¥nimo:', guestError);
      return;
    }
    
    console.log('‚úÖ Usu√°rio an√¥nimo criado ap√≥s primeira m√∫sica:', {
      id: guestUser.id,
      device_id: guestUser.device_id,
      status: guestUser.status,
      freesongsused: guestUser.freesongsused
    });
    
    // Verificar se seria bloqueado na segunda m√∫sica
    console.log('\nüö´ VERIFICA√á√ÉO: Segunda m√∫sica seria bloqueada para an√¥nimo?');
    const wouldBeBlocked = guestUser.freesongsused >= 1;
    console.log(`üìä freesongsused=${guestUser.freesongsused}, seria bloqueado: ${wouldBeBlocked ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    console.log('\nüîê PASSO 2: Usu√°rio faz login');
    
    // Criar usu√°rio autenticado (simula login)
    const { data: authUser, error: authError } = await supabase
      .from('user_creations')
      .insert({
        email: testEmail,
        status: 0, // autenticado
        freesongsused: 0
      })
      .select()
      .single();
    
    if (authError) {
      console.error('‚ùå Erro ao criar usu√°rio autenticado:', authError);
      return;
    }
    
    console.log('‚úÖ Usu√°rio autenticado criado:', {
      id: authUser.id,
      email: authUser.email,
      status: authUser.status,
      freesongsused: authUser.freesongsused
    });
    
    console.log('\nüîÑ PASSO 3: Executando merge (problema anterior)');
    
    const { data: mergeResult, error: mergeError } = await supabase
      .rpc('merge_guest_into_user', {
        p_device_id: testDeviceId,
        p_user_id: authUser.id
      });
    
    if (mergeError) {
      console.error('‚ùå FALHA NO MERGE:', mergeError);
      return;
    }
    
    console.log('‚úÖ Merge executado com sucesso:', mergeResult);
    
    // Verificar estado final do usu√°rio
    const { data: finalUser, error: finalError } = await supabase
      .from('user_creations')
      .select('*')
      .eq('id', authUser.id)
      .single();
    
    if (finalError) {
      console.error('‚ùå Erro ao verificar usu√°rio final:', finalError);
      return;
    }
    
    console.log('\nüìä ESTADO FINAL DO USU√ÅRIO:');
    console.log('- ID:', finalUser.id);
    console.log('- Email:', finalUser.email);
    console.log('- Device ID:', finalUser.device_id);
    console.log('- Status:', finalUser.status, finalUser.status === 0 ? '(autenticado ‚úÖ)' : '(an√¥nimo ‚ùå)');
    console.log('- Free Songs Used:', finalUser.freesongsused);
    
    console.log('\nüéµ PASSO 4: Verifica√ß√£o do bloqueio na segunda m√∫sica');
    
    // Simular l√≥gica do paywall
    const isAuthenticated = finalUser.status === 0;
    const freeSongsUsed = finalUser.freesongsused;
    const wouldBeBlockedAfterMerge = freeSongsUsed >= 1;
    
    console.log('üìã An√°lise do paywall:');
    console.log('- Usu√°rio autenticado:', isAuthenticated ? '‚úÖ SIM' : '‚ùå N√ÉO');
    console.log('- Free songs used:', freeSongsUsed);
    console.log('- Seria bloqueado (freesongsused >= 1):', wouldBeBlockedAfterMerge ? '‚ùå SIM' : '‚úÖ N√ÉO');
    
    console.log('\nüéØ RESULTADO FINAL:');
    
    const problemResolved = (
      finalUser.status === 0 && // usu√°rio deve estar autenticado
      finalUser.freesongsused === 1 && // deve ter o contador combinado
      finalUser.device_id === testDeviceId && // deve ter o device_id transferido
      mergeResult.merged_guest === true // merge deve ter acontecido
    );
    
    if (problemResolved) {
      console.log('üéâ PROBLEMA COMPLETAMENTE RESOLVIDO!');
      console.log('‚úÖ Status correto: autenticado (0)');
      console.log('‚úÖ freesongsused correto: combinado (1)');
      console.log('‚úÖ device_id transferido corretamente');
      console.log('‚úÖ Usu√°rio an√¥nimo removido');
      console.log('\nüìù COMPORTAMENTO ESPERADO:');
      console.log('- Usu√°rio an√¥nimo: primeira m√∫sica gratuita, segunda bloqueada');
      console.log('- Ap√≥s login e merge: usu√°rio autenticado pode continuar criando m√∫sicas');
      console.log('- O contador freesongsused √© preservado mas n√£o bloqueia usu√°rios autenticados');
    } else {
      console.log('‚ùå PROBLEMA AINDA EXISTE!');
      console.log('Verificar:');
      console.log('- Status:', finalUser.status === 0 ? '‚úÖ' : '‚ùå', finalUser.status);
      console.log('- freesongsused:', finalUser.freesongsused === 1 ? '‚úÖ' : '‚ùå', finalUser.freesongsused);
      console.log('- device_id:', finalUser.device_id === testDeviceId ? '‚úÖ' : '‚ùå', finalUser.device_id);
      console.log('- merge executado:', mergeResult.merged_guest ? '‚úÖ' : '‚ùå', mergeResult.merged_guest);
    }
    
    // Verificar se usu√°rio an√¥nimo foi removido
    const { data: remainingGuest, error: guestCheckError } = await supabase
      .from('user_creations')
      .select('*')
      .eq('id', guestUser.id)
      .maybeSingle();
    
    if (!guestCheckError && !remainingGuest) {
      console.log('‚úÖ Usu√°rio an√¥nimo foi removido corretamente');
    } else {
      console.log('‚ùå Usu√°rio an√¥nimo ainda existe:', remainingGuest);
    }
    
    // Limpar dados de teste
    console.log('\nüßπ Limpando dados de teste...');
    await supabase.from('user_creations').delete().eq('id', authUser.id);
    if (remainingGuest) {
      await supabase.from('user_creations').delete().eq('id', guestUser.id);
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testFinalValidation();