// Teste para monitorar logs do servidor durante gera√ß√£o de m√∫sica
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import { spawn } from 'child_process';

// Carregar vari√°veis de ambiente
dotenv.config();

const API_BASE_URL = 'http://localhost:3337';

// Fun√ß√£o autoSaveSongToDatabase inline (baseada no c√≥digo original)
async function executeAutoSave(task, userId = null, guestId = null, sunoResponse = null) {
  console.log('üîÑ [AUTOSAVE] Iniciando salvamento autom√°tico...');
  console.log('üìã [AUTOSAVE] Task ID:', task.id);
  console.log('üë§ [AUTOSAVE] User ID:', userId);
  console.log('üé≠ [AUTOSAVE] Guest ID:', guestId);
  
  try {
    // Validar identificadores
    if (!userId && !guestId) {
      console.log('‚ö†Ô∏è [AUTOSAVE] Nenhum identificador fornecido, usando guestId da task');
      guestId = task.metadata?.guestId;
    }
    
    if (!userId && !guestId) {
      throw new Error('Pelo menos um identificador (userId ou guestId) √© obrigat√≥rio');
    }
    
    console.log('‚úÖ [AUTOSAVE] Identificadores validados');
    
    // Preparar dados da m√∫sica
    const songData = {
      title: task.metadata?.songTitle || 'M√∫sica Personalizada',
      sunoTaskId: task.id,
      generationStatus: 'completed',
      metadata: {
        recipientName: task.metadata?.recipientName,
        senderName: task.metadata?.senderName,
        occasion: task.metadata?.occasion,
        relationship: task.metadata?.relationship,
        emotionalTone: task.metadata?.emotionalTone,
        hobbies: task.metadata?.hobbies,
        qualities: task.metadata?.qualities,
        completedClips: task.completedClips || [],
        sunoResponse: sunoResponse
      }
    };
    
    // Adicionar identificadores
    if (userId) {
      songData.userId = userId;
    }
    if (guestId) {
      songData.guestId = guestId;
    }
    
    console.log('üìù [AUTOSAVE] Dados preparados:', {
      title: songData.title,
      sunoTaskId: songData.sunoTaskId,
      userId: songData.userId,
      guestId: songData.guestId,
      generationStatus: songData.generationStatus
    });
    
    // Importar SongService
    const { SongService } = await import('./src/lib/services/songService.js');
    
    // Salvar no banco de dados
    console.log('üíæ [AUTOSAVE] Salvando no banco de dados...');
    const savedSong = await SongService.createSong(songData);
    
    console.log('‚úÖ [AUTOSAVE] M√∫sica salva com sucesso!');
    console.log('üéµ [AUTOSAVE] ID da m√∫sica salva:', savedSong.id);
    
    return savedSong;
    
  } catch (error) {
    console.error('‚ùå [AUTOSAVE] Erro no salvamento autom√°tico:', error.message);
    console.error('üîç [AUTOSAVE] Stack trace:', error.stack);
    throw error;
  }
}

async function monitorServerLogs() {
  console.log('üîç [MONITOR] Iniciando monitoramento de logs do servidor...');
  
  // Criar um processo para monitorar os logs do servidor
  const logProcess = spawn('tail', ['-f', '/dev/null'], { stdio: 'pipe' });
  
  let logBuffer = [];
  const maxLogLines = 100;
  
  // Simular captura de logs (na pr√°tica, precisar√≠amos acessar os logs reais)
  console.log('üìã [MONITOR] Logs ser√£o capturados durante o teste...');
  
  return {
    addLog: (message) => {
      logBuffer.push(`${new Date().toISOString()} - ${message}`);
      if (logBuffer.length > maxLogLines) {
        logBuffer.shift();
      }
      console.log(`üìù [LOG] ${message}`);
    },
    getLogs: () => logBuffer,
    stop: () => {
      if (logProcess && !logProcess.killed) {
        logProcess.kill();
      }
    }
  };
}

async function testWithLogMonitoring() {
  console.log('üß™ [TEST] Iniciando teste com monitoramento de logs');
  
  const monitor = await monitorServerLogs();
  
  try {
    // 1. Tentar gerar uma m√∫sica simples
    console.log('\nüìù [TEST] Passo 1: Tentando gerar m√∫sica...');
    const guestId = 'test-monitor-' + Date.now();
    
    monitor.addLog('Iniciando gera√ß√£o de m√∫sica para teste');
    
    const generateResponse = await fetch(`${API_BASE_URL}/api/generate-preview`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Guest-ID': guestId
      },
      body: JSON.stringify({
        recipientName: 'Maria Monitor',
        senderName: 'Jo√£o Monitor',
        occasion: 'Teste Monitor',
        relationship: 'Amiga',
        emotionalTone: 'Alegre',
        songTitle: 'M√∫sica de Teste Monitor',
        hobbies: 'M√∫sica',
        qualities: 'Carinhosa',
        guestId: guestId
      })
    });
    
    if (!generateResponse.ok) {
      const errorText = await generateResponse.text();
      monitor.addLog(`Erro na gera√ß√£o: ${generateResponse.status} - ${errorText}`);
      
      if (generateResponse.status === 503) {
        console.log('‚ö†Ô∏è [TEST] Servi√ßo indispon√≠vel (alta demanda)');
        console.log('üîÑ [TEST] Simulando cen√°rio de m√∫sica completada...');
        
        // Simular uma m√∫sica que foi completada
        await simulateCompletedSong(monitor, guestId);
        return;
      }
      
      throw new Error(`Erro na gera√ß√£o: ${generateResponse.status} - ${errorText}`);
    }
    
    const generateData = await generateResponse.json();
    monitor.addLog(`M√∫sica iniciada com taskId: ${generateData.taskId}`);
    
    if (!generateData.success || !generateData.taskId) {
      throw new Error('Falha ao iniciar gera√ß√£o de m√∫sica');
    }
    
    const taskId = generateData.taskId;
    console.log(`üéµ [TEST] TaskID: ${taskId}`);
    
    // 2. Monitorar por um tempo limitado
    console.log('\n‚è≥ [TEST] Passo 2: Monitorando por 30 segundos...');
    let attempts = 0;
    const maxAttempts = 6; // 30 segundos
    
    while (attempts < maxAttempts) {
      attempts++;
      
      const statusResponse = await fetch(`${API_BASE_URL}/api/check-music-status/${taskId}`);
      
      if (!statusResponse.ok) {
        monitor.addLog(`Erro ao verificar status: ${statusResponse.status}`);
        await new Promise(resolve => setTimeout(resolve, 5000));
        continue;
      }
      
      const statusData = await statusResponse.json();
      monitor.addLog(`Status: ${statusData.status}, Clipes: ${statusData.completedClips}/${statusData.totalExpected}`);
      
      if (statusData.status === 'COMPLETED') {
        monitor.addLog('üéâ M√∫sica completada! Verificando se autoSaveSongToDatabase foi executada...');
        break;
      } else if (statusData.status === 'FAILED') {
        monitor.addLog(`‚ùå Gera√ß√£o falhou: ${statusData.error}`);
        break;
      }
      
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
    
    // 3. Verificar se a m√∫sica foi salva
    console.log('\nüíæ [TEST] Passo 3: Verificando salvamento...');
    await checkIfSongWasSaved(monitor, taskId, guestId);
    
  } catch (error) {
    monitor.addLog(`Erro no teste: ${error.message}`);
    console.error('‚ùå [TEST] Erro:', error.message);
  } finally {
    monitor.stop();
    
    // Mostrar resumo dos logs
    console.log('\nüìã [TEST] Resumo dos logs capturados:');
    const logs = monitor.getLogs();
    logs.forEach((log, index) => {
      console.log(`${index + 1}. ${log}`);
    });
  }
}

async function simulateCompletedSong(monitor, guestId) {
  console.log('üé≠ [SIMULATE] Simulando m√∫sica completada...');
  
  monitor.addLog('Simulando m√∫sica que foi completada');
  
  // Simular dados de uma m√∫sica completada
  const mockTask = {
    id: 'simulated-task-' + Date.now(),
    status: 'COMPLETED',
    metadata: {
      recipientName: 'Maria Simulada',
      senderName: 'Jo√£o Simulado',
      occasion: 'Teste Simulado',
      relationship: 'Amiga',
      emotionalTone: 'Alegre',
      songTitle: 'M√∫sica Simulada',
      hobbies: 'M√∫sica',
      qualities: 'Carinhosa',
      guestId: guestId
    },
    completedClips: [
      {
        id: 'clip-sim-1',
        audio_url: 'https://example.com/sim-audio.mp3',
        title: 'M√∫sica Simulada'
      }
    ]
  };
  
  monitor.addLog('Chamando autoSaveSongToDatabase para m√∫sica simulada...');
  
  try {
    // Executar fun√ß√£o autoSaveSongToDatabase inline (baseada no c√≥digo original)
    const result = await executeAutoSave(mockTask, null, guestId, null);
    
    monitor.addLog(`‚úÖ autoSaveSongToDatabase executada com sucesso! ID: ${result.id}`);
    
    // Verificar user_creations
    await checkUserCreations(monitor, guestId);
    
  } catch (error) {
    monitor.addLog(`‚ùå Erro ao executar autoSaveSongToDatabase: ${error.message}`);
  }
}

async function checkIfSongWasSaved(monitor, taskId, guestId) {
  monitor.addLog('Verificando se a m√∫sica foi salva no banco...');
  
  try {
    const { SongService } = await import('./src/lib/services/songService.js');
    
    // Buscar por taskId
    const songByTaskId = await SongService.getSongByTaskId(taskId);
    
    if (songByTaskId) {
      monitor.addLog(`‚úÖ M√∫sica encontrada por taskId: ${songByTaskId.id}`);
    } else {
      monitor.addLog('‚ö†Ô∏è M√∫sica n√£o encontrada por taskId');
    }
    
    // Buscar por guestId
    const songsByGuest = await SongService.getSongsByGuest(guestId);
    
    if (songsByGuest && songsByGuest.length > 0) {
      monitor.addLog(`‚úÖ ${songsByGuest.length} m√∫sica(s) encontrada(s) por guestId`);
    } else {
      monitor.addLog('‚ö†Ô∏è Nenhuma m√∫sica encontrada por guestId');
    }
    
    // Verificar user_creations
    await checkUserCreations(monitor, guestId);
    
  } catch (error) {
    monitor.addLog(`‚ùå Erro ao verificar salvamento: ${error.message}`);
  }
}

async function checkUserCreations(monitor, guestId) {
  monitor.addLog('Verificando tabela user_creations...');
  
  try {
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    );
    
    const { data: userCreations, error } = await supabase
      .from('user_creations')
      .select('*')
      .eq('device_id', guestId);
    
    if (error) {
      monitor.addLog(`‚ùå Erro ao verificar user_creations: ${error.message}`);
    } else if (userCreations && userCreations.length > 0) {
      monitor.addLog(`‚úÖ Registro encontrado em user_creations: ${userCreations[0].creations} cria√ß√µes`);
    } else {
      monitor.addLog('‚ö†Ô∏è Nenhum registro encontrado em user_creations');
    }
    
  } catch (error) {
    monitor.addLog(`‚ùå Erro ao verificar user_creations: ${error.message}`);
  }
}

// Executar o teste
testWithLogMonitoring()
  .then(() => {
    console.log('\n‚úÖ [TEST] Teste de monitoramento conclu√≠do!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå [TEST] Teste de monitoramento falhou:', error.message);
    process.exit(1);
  });