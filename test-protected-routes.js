import { createClient } from '@supabase/supabase-js';
import fetch from 'node-fetch';

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testProtectedRoutes() {
  console.log('üîí Testando prote√ß√£o de rotas...');
  
  try {
    // 1. Verificar se h√° usu√°rio logado
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError) {
      console.log('‚ùå Erro ao verificar usu√°rio:', userError.message);
    }
    
    console.log('üë§ Usu√°rio atual:', user ? `${user.email} (${user.id})` : 'N√£o logado');
    
    // 2. Testar acesso √†s rotas protegidas via API
    const protectedRoutes = [
      '/api/songs',
      '/api/songs/stats',
      '/api/user/profile'
    ];
    
    console.log('\nüåê Testando acesso √†s rotas da API...');
    
    for (const route of protectedRoutes) {
      try {
        const response = await fetch(`http://localhost:5173${route}`, {
          headers: {
            'Authorization': user ? `Bearer ${(await supabase.auth.getSession()).data.session?.access_token}` : '',
            'Content-Type': 'application/json'
          }
        });
        
        console.log(`${route}: ${response.status} ${response.statusText}`);
        
        if (response.status === 401) {
          console.log('  ‚úÖ Rota protegida corretamente (401 Unauthorized)');
        } else if (response.status === 200) {
          console.log('  ‚ö†Ô∏è  Rota acess√≠vel (pode estar OK se usu√°rio logado)');
        } else {
          console.log(`  ‚ùì Status inesperado: ${response.status}`);
        }
      } catch (error) {
        console.log(`  ‚ùå Erro ao acessar ${route}:`, error.message);
      }
    }
    
    // 3. Verificar estado da sess√£o
    console.log('\nüîë Verificando estado da sess√£o...');
    const { data: session, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.log('‚ùå Erro ao obter sess√£o:', sessionError.message);
    } else {
      console.log('üìã Sess√£o ativa:', session.session ? 'Sim' : 'N√£o');
      if (session.session) {
        console.log('  - Token expira em:', new Date(session.session.expires_at * 1000));
        console.log('  - Refresh token:', session.session.refresh_token ? 'Presente' : 'Ausente');
      }
    }
    
    // 4. Testar localStorage (simula√ß√£o)
    console.log('\nüíæ Verificando armazenamento local...');
    
    // Simular verifica√ß√£o do que seria armazenado no localStorage
    const projectId = supabaseUrl.split('//')[1].split('.')[0];
    const tokenKey = `sb-${projectId}-auth-token`;
    const mockLocalStorage = {
      [tokenKey]: session.session ? 'presente' : 'ausente'
    };
    
    console.log('Token no localStorage:', mockLocalStorage[tokenKey]);
    
    // 5. Resumo da prote√ß√£o
    console.log('\nüìä RESUMO DA PROTE√á√ÉO DE ROTAS:');
    console.log('================================');
    
    if (!user) {
      console.log('‚úÖ Usu√°rio n√£o est√° logado - prote√ß√£o deve estar ativa');
      console.log('üîç Verifique se o frontend redireciona para login ao acessar /minhas-musicas');
      console.log('üîç Verifique se as APIs retornam 401 para requisi√ß√µes sem token');
    } else {
      console.log('‚ö†Ô∏è  Usu√°rio est√° logado - rotas devem estar acess√≠veis');
      console.log('üîç Para testar prote√ß√£o, fa√ßa logout e tente acessar as rotas novamente');
    }
    
    // 6. Instru√ß√µes para teste manual
    console.log('\nüß™ TESTE MANUAL RECOMENDADO:');
    console.log('1. Abra o navegador em modo an√¥nimo');
    console.log('2. Acesse diretamente: http://localhost:5173/minhas-musicas');
    console.log('3. Verifique se √© redirecionado para login ou se aparece modal');
    console.log('4. Tente acessar as APIs diretamente sem token de autentica√ß√£o');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar teste
testProtectedRoutes().catch(console.error);