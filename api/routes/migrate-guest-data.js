import { Router } from 'express';
import { SongService } from '../../src/lib/services/songService';
import { MigrateGuestDataSchema } from '../../src/lib/schemas/song';

const router = Router();

/**
 * POST /api/migrate-guest-data
 * Migra dados de m√∫sicas de convidado para usu√°rio autenticado
 */
router.post('/', async (req, res) => {
  try {
    console.log('üîÑ Requisi√ß√£o de migra√ß√£o de dados:', req.body);

    // Configurar CORS
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    // Validar dados do corpo da requisi√ß√£o
    const validation = MigrateGuestDataSchema.safeParse(req.body);
    
    if (!validation.success) {
      console.log('‚ùå Dados inv√°lidos:', validation.error.errors);
      return res.status(400).json({
        success: false,
        error: 'Dados inv√°lidos',
        details: validation.error.errors
      });
    }

    const { guestId } = validation.data;
    
    // TODO: Em produ√ß√£o, o userId deveria vir da autentica√ß√£o (JWT token)
    // Por enquanto, vamos usar um userId de teste ou gerar um novo
    const userId = req.body.userId || 'test-user-' + Date.now();

    console.log(`üîç Verificando m√∫sicas para migra√ß√£o: ${guestId} ‚Üí ${userId}`);

    // Verificar se h√° m√∫sicas para migrar
    const guestSongs = await SongService.getSongsByGuest(guestId, 100, 0);
    
    if (guestSongs.length === 0) {
      console.log('‚ÑπÔ∏è Nenhuma m√∫sica encontrada para migra√ß√£o');
      return res.status(200).json({
        success: true,
        message: 'Nenhuma m√∫sica encontrada para migra√ß√£o',
        data: {
          migratedCount: 0,
          guestId,
          userId,
          songs: []
        }
      });
    }

    console.log(`üì¶ Encontradas ${guestSongs.length} m√∫sicas para migrar`);

    // Executar migra√ß√£o
    const migrationResult = await SongService.migrateGuestSongs(guestId, userId);
    
    if (!migrationResult.success) {
      console.log('‚ùå Falha na migra√ß√£o:', migrationResult.error);
      return res.status(500).json({
        success: false,
        error: 'Falha na migra√ß√£o',
        details: migrationResult.error
      });
    }

    console.log(`‚úÖ Migra√ß√£o conclu√≠da: ${migrationResult.migratedCount} m√∫sicas`);

    // Limpar dados antigos de convidados (opcional)
    try {
      await cleanupOldGuestData();
    } catch (cleanupError) {
      console.warn('‚ö†Ô∏è Erro na limpeza de dados antigos:', cleanupError);
      // N√£o falhar a migra√ß√£o por causa da limpeza
    }

    return res.status(200).json({
      success: true,
      message: `Migra√ß√£o conclu√≠da com sucesso! ${migrationResult.migratedCount} m√∫sicas migradas.`,
      data: {
        migratedCount: migrationResult.migratedCount,
        guestId,
        userId,
        songs: guestSongs.map(song => ({
          id: song.id,
          title: song.title,
          createdAt: song.createdAt
        }))
      }
    });

  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o de dados:', error);
    
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    
    return res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      details: errorMessage
    });
  }
});

/**
 * OPTIONS /api/migrate-guest-data
 * Suporte para preflight CORS
 */
router.options('/', (req, res) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  res.status(200).send();
});

/**
 * Fun√ß√£o auxiliar para verificar status da migra√ß√£o
 */
async function checkMigrationStatus(guestId, userId) {
  try {
    const guestSongs = await SongService.getSongsByGuest(guestId, 1, 0);
    const userSongs = await SongService.getSongsByUser(userId, 1, 0);
    
    return {
      hasGuestData: guestSongs.length > 0,
      hasUserData: userSongs.length > 0,
      needsMigration: guestSongs.length > 0
    };
  } catch (error) {
    console.error('‚ùå Erro ao verificar status da migra√ß√£o:', error);
    return {
      hasGuestData: false,
      hasUserData: false,
      needsMigration: false
    };
  }
}

/**
 * Fun√ß√£o auxiliar para limpeza de dados antigos de convidados
 */
async function cleanupOldGuestData() {
  try {
    // Limpar m√∫sicas de convidados com mais de 30 dias
    const result = await SongService.deleteOldGuestSongs(30);
    console.log(`üßπ Limpeza conclu√≠da: ${result.deletedCount} registros antigos removidos`);
    return result;
  } catch (error) {
    console.error('‚ùå Erro na limpeza de dados antigos:', error);
    throw error;
  }
}

export default router;