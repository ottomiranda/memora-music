require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const axios = require('axios');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3001';

async function testPaywallLogic() {
  console.log('üß™ Testando l√≥gica espec√≠fica do paywall...');
  
  const testDeviceId = `paywall-logic-${Date.now()}`;
  const testEmail = `paywall-logic-${Date.now()}@example.com`;
  
  try {
    // Limpar dados anteriores
    console.log('üßπ Limpando dados de teste...');
    await supabase.from('user_creations').delete().eq('device_id', testDeviceId);
    await supabase.from('user_creations').delete().eq('email', testEmail);
    
    console.log('\nüì± PASSO 1: Criar usu√°rio an√¥nimo com 1 m√∫sica usada');
    const { data: guestUser, error: guestError } = await supabase
      .from('user_creations')
      .insert({
        device_id: testDeviceId,
        freesongsused: 1,
        status: 1 // an√¥nimo
      })
      .select()
      .single();
    
    if (guestError) {
      console.error('‚ùå Erro ao criar usu√°rio an√¥nimo:', guestError);
      return;
    }
    
    console.log('üë§ Usu√°rio an√¥nimo criado:', {
      id: guestUser.id,
      device_id: guestUser.device_id,
      freesongsused: guestUser.freesongsused,
      status: guestUser.status
    });
    
    console.log('\nüö´ PASSO 2: Testar paywall para usu√°rio an√¥nimo (deve bloquear)');
    try {
      const response = await axios.get(`${API_BASE_URL}/api/user/creation-status`, {
        params: { deviceId: testDeviceId }
      });
      
      console.log('üìä Resposta do paywall (an√¥nimo):', {
        isFree: response.data.isFree,
        freeSongsUsed: response.data.freeSongsUsed,
        message: response.data.message,
        userType: response.data.userType
      });
      
      if (!response.data.isFree) {
        console.log('‚úÖ CORRETO: Usu√°rio an√¥nimo com freesongsused=1 foi bloqueado');
      } else {
        console.log('‚ùå ERRO: Usu√°rio an√¥nimo com freesongsused=1 N√ÉO foi bloqueado!');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  API n√£o dispon√≠vel para teste an√¥nimo');
    }
    
    console.log('\nüîê PASSO 3: Criar usu√°rio autenticado');
    const { data: authUser, error: authError } = await supabase
      .from('user_creations')
      .insert({
        email: testEmail,
        status: 0 // autenticado
      })
      .select()
      .single();
    
    if (authError) {
      console.error('‚ùå Erro ao criar usu√°rio autenticado:', authError);
      return;
    }
    
    console.log('üë§ Usu√°rio autenticado criado:', {
      id: authUser.id,
      email: authUser.email,
      freesongsused: authUser.freesongsused,
      status: authUser.status
    });
    
    console.log('\nüîÑ PASSO 4: Executar merge');
    const { data: mergeResult, error: mergeError } = await supabase
      .rpc('merge_guest_into_user', {
        authenticated_user_id: authUser.id,
        guest_device_id: testDeviceId
      });
    
    if (mergeError) {
      console.error('‚ùå Erro no merge:', mergeError);
      return;
    }
    
    console.log('‚úÖ Merge executado:', mergeResult);
    
    // Verificar usu√°rio ap√≥s merge
    const { data: userAfterMerge } = await supabase
      .from('user_creations')
      .select('*')
      .eq('id', authUser.id)
      .single();
    
    console.log('üë§ Usu√°rio ap√≥s merge:', {
      id: userAfterMerge.id,
      email: userAfterMerge.email,
      device_id: userAfterMerge.device_id,
      freesongsused: userAfterMerge.freesongsused,
      status: userAfterMerge.status,
      status_desc: userAfterMerge.status === 0 ? 'autenticado' : 'an√¥nimo'
    });
    
    console.log('\nüéµ PASSO 5: Testar paywall para usu√°rio autenticado ap√≥s merge');
    
    // Simular token JWT (para teste, vamos usar o userId diretamente)
    const mockToken = `mock-jwt-${authUser.id}`;
    
    try {
      const response = await axios.get(`${API_BASE_URL}/api/user/creation-status`, {
        headers: {
          'Authorization': `Bearer ${mockToken}`
        },
        params: { deviceId: testDeviceId }
      });
      
      console.log('üìä Resposta do paywall (autenticado):', {
        isFree: response.data.isFree,
        freeSongsUsed: response.data.freeSongsUsed,
        message: response.data.message,
        userType: response.data.userType
      });
      
      console.log('\nüîç AN√ÅLISE DO RESULTADO:');
      console.log(`- freesongsused ap√≥s merge: ${userAfterMerge.freesongsused}`);
      console.log(`- status ap√≥s merge: ${userAfterMerge.status} (${userAfterMerge.status === 0 ? 'autenticado' : 'an√¥nimo'})`);
      console.log(`- isFree retornado pela API: ${response.data.isFree}`);
      console.log(`- L√≥gica esperada: freesongsused < 1 = ${userAfterMerge.freesongsused < 1}`);
      
      if (userAfterMerge.freesongsused >= 1 && response.data.isFree === false) {
        console.log('‚úÖ CORRETO: Usu√°rio autenticado com freesongsused>=1 foi bloqueado');
      } else if (userAfterMerge.freesongsused >= 1 && response.data.isFree === true) {
        console.log('‚ùå PROBLEMA CONFIRMADO: Usu√°rio autenticado com freesongsused>=1 N√ÉO foi bloqueado!');
        console.log('   Isso permite que o usu√°rio crie uma segunda m√∫sica quando n√£o deveria.');
      } else {
        console.log('‚ÑπÔ∏è  Resultado inesperado - verificar l√≥gica');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è  Erro na API ou token inv√°lido:', error.response?.data || error.message);
      
      // Teste direto da l√≥gica
      console.log('\nüßÆ Testando l√≥gica diretamente:');
      const freeSongsUsed = userAfterMerge.freesongsused || 0;
      const isFree = freeSongsUsed < 1;
      
      console.log('üìä L√≥gica direta:', {
        freeSongsUsed,
        isFree,
        shouldBeBlocked: !isFree
      });
      
      if (!isFree) {
        console.log('‚úÖ L√ìGICA CORRETA: Usu√°rio deveria ser bloqueado');
      } else {
        console.log('‚ùå L√ìGICA INCORRETA: Usu√°rio n√£o deveria ser bloqueado');
      }
    }
    
    console.log('\nüßπ Limpando dados de teste...');
    await supabase.from('user_creations').delete().eq('id', authUser.id);
    
    console.log('\nüéØ RESUMO:');
    console.log('1. Usu√°rio an√¥nimo com freesongsused=1 deve ser bloqueado');
    console.log('2. Ap√≥s merge, usu√°rio autenticado herda freesongsused=1');
    console.log('3. Usu√°rio autenticado com freesongsused=1 tamb√©m deve ser bloqueado');
    console.log('4. A l√≥gica do paywall n√£o deve fazer distin√ß√£o entre an√¥nimo e autenticado');
    console.log('5. O campo status n√£o deve afetar a l√≥gica de bloqueio, apenas freesongsused');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testPaywallLogic();