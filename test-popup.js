// Teste manual do popup de valida√ß√£o
// Este arquivo testa a funcionalidade do popup e a conex√£o com o Supabase

const API_BASE = 'http://localhost:3001';

// Fun√ß√£o para testar o envio de feedback
async function testFeedbackSubmission() {
  console.log('üß™ Iniciando teste do popup de valida√ß√£o...');
  
  // Teste 1: Dados v√°lidos
  const validFeedback = {
    difficulty: 3,
    wouldRecommend: true,
    priceWillingness: '10-20'
  };
  
  try {
    console.log('\nüì§ Teste 1: Enviando dados v√°lidos...');
    console.log('Payload:', JSON.stringify(validFeedback, null, 2));
    
    const response = await fetch(`${API_BASE}/api/save-feedback`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(validFeedback)
    });
    
    console.log('Status:', response.status);
    console.log('Status Text:', response.statusText);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Sucesso! Resposta:', result);
    } else {
      const error = await response.text();
      console.log('‚ùå Erro na resposta:', error);
    }
    
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o:', error.message);
  }
  
  // Teste 2: Dados inv√°lidos (para testar valida√ß√£o)
  const invalidFeedback = {
    difficulty: 'muito dif√≠cil', // String em vez de n√∫mero
    wouldRecommend: 'sim', // String em vez de boolean
    priceWillingness: 999 // N√∫mero em vez de string
  };
  
  try {
    console.log('\nüì§ Teste 2: Enviando dados inv√°lidos (teste de valida√ß√£o)...');
    console.log('Payload:', JSON.stringify(invalidFeedback, null, 2));
    
    const response = await fetch(`${API_BASE}/api/save-feedback`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(invalidFeedback)
    });
    
    console.log('Status:', response.status);
    console.log('Status Text:', response.statusText);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚ö†Ô∏è Inesperado: Dados inv√°lidos foram aceitos:', result);
    } else {
      const error = await response.text();
      console.log('‚úÖ Esperado: Valida√ß√£o funcionou, dados rejeitados:', error);
    }
    
  } catch (error) {
    console.log('‚ùå Erro na requisi√ß√£o:', error.message);
  }
  
  // Teste 3: Diferentes valores de pre√ßo
  const priceTests = [
    { difficulty: 2, wouldRecommend: false, priceWillingness: '20-50' },
    { difficulty: 4, wouldRecommend: true, priceWillingness: '50-100' },
    { difficulty: 1, wouldRecommend: true, priceWillingness: '100+' }
  ];
  
  for (let i = 0; i < priceTests.length; i++) {
    const testData = priceTests[i];
    
    try {
      console.log(`\nüì§ Teste ${3 + i}: Testando diferentes valores de pre√ßo...`);
      console.log('Payload:', JSON.stringify(testData, null, 2));
      
      const response = await fetch(`${API_BASE}/api/save-feedback`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testData)
      });
      
      console.log('Status:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Sucesso! ID do feedback:', result.id);
      } else {
        const error = await response.text();
        console.log('‚ùå Erro:', error);
      }
      
    } catch (error) {
      console.log('‚ùå Erro na requisi√ß√£o:', error.message);
    }
  }
  
  console.log('\nüèÅ Teste conclu√≠do!');
}

// Executar o teste
testFeedbackSubmission();