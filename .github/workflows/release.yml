name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            if [[ $VERSION =~ -[a-zA-Z] ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Pre-release: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-beta.1"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate environment
        run: npm run validate-env

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm test
        env:
          CI: true

      - name: Build project
        run: npm run build

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Check for vulnerabilities
        run: |
          if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null; then
            echo "❌ High severity vulnerabilities found"
            npm audit --audit-level=high
            exit 1
          else
            echo "✅ No high severity vulnerabilities found"
          fi

  build:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: [validate, test, security]
    outputs:
      build_hash: ${{ steps.hash.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          NODE_ENV: production

      - name: Generate build hash
        id: hash
        run: |
          HASH=$(find dist -type f -exec sha256sum {} \; | sha256sum | cut -d' ' -f1)
          echo "hash=$HASH" >> $GITHUB_OUTPUT
          echo "Build hash: $HASH"

      - name: Create build archive
        run: |
          tar -czf build-${{ needs.validate.outputs.version }}.tar.gz dist/
          zip -r build-${{ needs.validate.outputs.version }}.zip dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: |
            build-${{ needs.validate.outputs.version }}.tar.gz
            build-${{ needs.validate.outputs.version }}.zip
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.is_prerelease == 'true'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Skip deployment (Vercel removed)
        id: deploy
        run: |
          echo "url=http://localhost:3000" >> $GITHUB_OUTPUT
          echo "Deployment skipped - Vercel integration removed"

      - name: Run smoke tests
        run: |
          sleep 30  # Wait for deployment to be ready
          curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1
          echo "✅ Staging deployment is healthy"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, deploy-staging]
    if: always() && needs.validate.result == 'success' && needs.build.result == 'success' && (needs.deploy-staging.result == 'success' || needs.deploy-staging.result == 'skipped')
    outputs:
      release_id: ${{ steps.release.outputs.id }}
      release_url: ${{ steps.release.outputs.html_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-assets
          path: ./artifacts

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## 🚀 What's New in $VERSION" > release_notes.md
          echo "" >> release_notes.md
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "### 📋 Changes since $PREVIOUS_TAG" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### 🔧 Technical Details" >> release_notes.md
          echo "- **Build Hash**: \`${{ needs.build.outputs.build_hash }}\`" >> release_notes.md
          echo "- **Node Version**: ${{ env.NODE_VERSION }}" >> release_notes.md
          echo "- **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          
          if [[ "${{ needs.validate.outputs.is_prerelease }}" == "true" ]]; then
            echo "" >> release_notes.md
            echo "### ⚠️ Pre-release Notice" >> release_notes.md
            echo "This is a pre-release version and may contain bugs or incomplete features." >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "### 📦 Installation" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "npm install" >> release_notes.md
          echo "npm run build" >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Create GitHub Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: ${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}

      - name: Upload release assets
        run: |
          for file in ./artifacts/*; do
            if [[ -f "$file" ]]; then
              echo "Uploading $file..."
              gh release upload ${{ needs.validate.outputs.version }} "$file"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    if: needs.validate.outputs.is_prerelease == 'false'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Skip deployment (Vercel removed)
        id: deploy
        run: |
          echo "url=http://localhost:3000" >> $GITHUB_OUTPUT
          echo "Deployment skipped - Vercel integration removed"

      - name: Run production smoke tests
        run: |
          sleep 60  # Wait for deployment to be ready
          curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1
          echo "✅ Production deployment is healthy"

      - name: Update release with production URL
        run: |
          gh release edit ${{ needs.validate.outputs.version }} --notes-file - <<EOF
          $(gh release view ${{ needs.validate.outputs.version }} --json body -q .body)
          
          ### 🌐 Deployment
          - **Production URL**: ${{ steps.deploy.outputs.url }}
          - **Deployment Time**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [validate, create-release, deploy-production]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Notify Slack (if configured)
        if: vars.SLACK_WEBHOOK_URL
        run: |
          STATUS="✅ Success"
          if [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
            STATUS="❌ Deployment Failed"
          elif [[ "${{ needs.validate.outputs.is_prerelease }}" == "true" ]]; then
            STATUS="🚧 Pre-release"
          fi
          
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"$STATUS: Memora Music ${{ needs.validate.outputs.version }} released\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*$STATUS*\\n:rocket: Memora Music ${{ needs.validate.outputs.version }} has been released!\\n\\n:link: <${{ needs.create-release.outputs.release_url }}|View Release>\"
                  }
                }
              ]
            }" \
            ${{ vars.SLACK_WEBHOOK_URL }}

      - name: Create deployment summary
        run: |
          echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: $([ "${{ needs.validate.outputs.is_prerelease }}" == "true" ] && echo "Pre-release" || echo "Stable Release")" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: [${{ needs.validate.outputs.version }}](${{ needs.create-release.outputs.release_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Hash**: \`${{ needs.build.outputs.build_hash }}\`" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "- **Production**: ✅ Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.validate.outputs.is_prerelease }}" == "true" ]]; then
            echo "- **Staging**: ✅ Deployed for testing" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Production**: ❌ Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi