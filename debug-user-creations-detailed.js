// Script para investigar detalhadamente a tabela user_creations
import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const DEVICE_ID = "0315a2fe-220a-401b-b1b9-055a27733360";

async function investigateUserCreations() {
  console.log('üîç [INVESTIGA√á√ÉO] Investigando tabela user_creations em detalhes');
  console.log('üìã [INVESTIGA√á√ÉO] Device ID:', DEVICE_ID);
  
  try {
    // 1. Buscar TODOS os registros na tabela user_creations
    console.log('\n1Ô∏è‚É£ [INVESTIGA√á√ÉO] Buscando TODOS os registros em user_creations...');
    const { data: allRecords, error: allError } = await supabase
      .from('user_creations')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (allError) {
      console.error('‚ùå [INVESTIGA√á√ÉO] Erro ao consultar user_creations:', allError.message);
      return;
    }
    
    console.log(`üìä [INVESTIGA√á√ÉO] Total de registros encontrados: ${allRecords.length}`);
    
    if (allRecords.length > 0) {
      console.log('\nüìã [INVESTIGA√á√ÉO] Todos os registros:');
      allRecords.forEach((record, index) => {
        console.log(`   ${index + 1}. Device ID: ${record.device_id}`);
        console.log(`      User ID: ${record.user_id}`);
        console.log(`      Cria√ß√µes: ${record.creations}`);
        console.log(`      M√∫sicas gratuitas: ${record.freesongsused}`);
        console.log(`      Criado em: ${record.created_at}`);
        console.log(`      Atualizado em: ${record.updated_at}`);
        console.log('      ---');
      });
    }
    
    // 2. Buscar especificamente pelo device_id fornecido
    console.log('\n2Ô∏è‚É£ [INVESTIGA√á√ÉO] Buscando especificamente pelo device_id...');
    const { data: specificRecord, error: specificError } = await supabase
      .from('user_creations')
      .select('*')
      .eq('device_id', DEVICE_ID);
    
    if (specificError) {
      console.error('‚ùå [INVESTIGA√á√ÉO] Erro ao buscar device_id espec√≠fico:', specificError.message);
    } else {
      console.log(`üìä [INVESTIGA√á√ÉO] Registros para device_id ${DEVICE_ID}:`, specificRecord.length);
      if (specificRecord.length > 0) {
        console.log('üìã [INVESTIGA√á√ÉO] Dados encontrados:', JSON.stringify(specificRecord, null, 2));
      }
    }
    
    // 3. Buscar tamb√©m pelo user_id (caso seja o mesmo valor)
    console.log('\n3Ô∏è‚É£ [INVESTIGA√á√ÉO] Buscando tamb√©m pelo user_id...');
    const { data: userRecord, error: userError } = await supabase
      .from('user_creations')
      .select('*')
      .eq('user_id', DEVICE_ID);
    
    if (userError) {
      console.error('‚ùå [INVESTIGA√á√ÉO] Erro ao buscar user_id espec√≠fico:', userError.message);
    } else {
      console.log(`üìä [INVESTIGA√á√ÉO] Registros para user_id ${DEVICE_ID}:`, userRecord.length);
      if (userRecord.length > 0) {
        console.log('üìã [INVESTIGA√á√ÉO] Dados encontrados:', JSON.stringify(userRecord, null, 2));
      }
    }
    
    // 4. Verificar se existe o registro mencionado pelo usu√°rio
    console.log('\n4Ô∏è‚É£ [INVESTIGA√á√ÉO] Procurando registro com freesongsused = 2...');
    const { data: problematicRecord, error: problematicError } = await supabase
      .from('user_creations')
      .select('*')
      .eq('freesongsused', 2);
    
    if (problematicError) {
      console.error('‚ùå [INVESTIGA√á√ÉO] Erro ao buscar registros com freesongsused = 2:', problematicError.message);
    } else {
      console.log(`üìä [INVESTIGA√á√ÉO] Registros com freesongsused = 2:`, problematicRecord.length);
      if (problematicRecord.length > 0) {
        console.log('üìã [INVESTIGA√á√ÉO] Registros problem√°ticos encontrados:');
        problematicRecord.forEach((record, index) => {
          console.log(`   ${index + 1}. Device ID: ${record.device_id}`);
          console.log(`      User ID: ${record.user_id}`);
          console.log(`      Cria√ß√µes: ${record.creations}`);
          console.log(`      M√∫sicas gratuitas: ${record.freesongsused}`);
          console.log(`      Criado em: ${record.created_at}`);
          console.log(`      Atualizado em: ${record.updated_at}`);
          console.log('      ---');
        });
      }
    }
    
    // 5. Verificar estrutura da tabela
    console.log('\n5Ô∏è‚É£ [INVESTIGA√á√ÉO] Verificando estrutura da tabela...');
    const { data: tableInfo, error: tableError } = await supabase
      .rpc('get_table_columns', { table_name: 'user_creations' })
      .single();
    
    if (tableError) {
      console.log('‚ö†Ô∏è [INVESTIGA√á√ÉO] N√£o foi poss√≠vel obter estrutura da tabela via RPC');
      
      // Tentar uma consulta simples para ver as colunas
      const { data: sampleData, error: sampleError } = await supabase
        .from('user_creations')
        .select('*')
        .limit(1);
      
      if (!sampleError && sampleData && sampleData.length > 0) {
        console.log('üìã [INVESTIGA√á√ÉO] Colunas detectadas:', Object.keys(sampleData[0]));
      }
    } else {
      console.log('üìã [INVESTIGA√á√ÉO] Estrutura da tabela:', tableInfo);
    }
    
  } catch (error) {
    console.error('üí• [INVESTIGA√á√ÉO] Erro geral:', error.message);
  }
}

// Executar investiga√ß√£o
investigateUserCreations()
  .then(() => {
    console.log('\nüéâ [INVESTIGA√á√ÉO] Investiga√ß√£o detalhada conclu√≠da!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå [INVESTIGA√á√ÉO] Falha na investiga√ß√£o:', error.message);
    process.exit(1);
  });