// Usando fetch nativo do Node.js 18+

// Configura√ß√µes
const BASE_URL = 'http://localhost:5173';
const API_URL = `${BASE_URL}/api`;

// Simular um deviceId √∫nico para este teste
const testDeviceId = `test-device-${Date.now()}`;

async function testPaywallFlow() {
  console.log('üß™ Iniciando teste do fluxo de paywall...');
  console.log('üì± Device ID de teste:', testDeviceId);
  
  try {
    // Teste 1: Verificar status inicial (deve ser isFree: true)
    console.log('\n=== TESTE 1: Status inicial ===');
    const initialStatus = await fetch(`${API_URL}/user/creation-status`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-Device-ID': testDeviceId
      }
    });
    
    const initialData = await initialStatus.json();
    console.log('üìä Status inicial:', JSON.stringify(initialData, null, 2));
    
    if (!initialData.isFree) {
      console.log('‚ùå ERRO: Status inicial deveria ser isFree: true');
      return;
    }
    
    // Teste 2: Primeira cria√ß√£o de m√∫sica (deve funcionar)
    console.log('\n=== TESTE 2: Primeira cria√ß√£o ===');
    const firstCreation = await fetch(`${API_URL}/generate-preview`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Device-ID': testDeviceId
      },
      body: JSON.stringify({
        songTitle: 'Teste 1',
        recipientName: 'Jo√£o',
        senderName: 'Maria',
        occasion: 'anivers√°rio',
        relationship: 'amigo',
        genre: 'pop',
        mood: 'alegre',
        emotionalTone: 'feliz',
        duration: 'short',
        tempo: 'medium',
        vocalPreference: 'male',
        hobbies: 'm√∫sica, esportes',
        qualities: 'carinhoso, engra√ßado',
        lyricsOnly: true
      })
    });
    
    const firstData = await firstCreation.json();
    console.log('üéµ Primeira cria√ß√£o:', JSON.stringify(firstData, null, 2));
    
    if (!firstData.success) {
      console.log('‚ùå ERRO: Primeira cria√ß√£o deveria ter sucesso');
      return;
    }
    
    // Teste 3: Verificar status ap√≥s primeira cria√ß√£o (deve ser isFree: false)
    console.log('\n=== TESTE 3: Status ap√≥s primeira cria√ß√£o ===');
    const afterFirstStatus = await fetch(`${API_URL}/user/creation-status`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-Device-ID': testDeviceId
      }
    });
    
    const afterFirstData = await afterFirstStatus.json();
    console.log('üìä Status ap√≥s primeira:', JSON.stringify(afterFirstData, null, 2));
    
    if (afterFirstData.isFree) {
      console.log('‚ùå ERRO CR√çTICO: Status ap√≥s primeira cria√ß√£o deveria ser isFree: false');
      console.log('üîç Isso indica que o contador n√£o foi incrementado corretamente!');
      return;
    }
    
    // Teste 4: Segunda cria√ß√£o de m√∫sica (deve ser bloqueada)
    console.log('\n=== TESTE 4: Segunda cria√ß√£o (deve ser bloqueada) ===');
    const secondCreation = await fetch(`${API_URL}/generate-preview`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Device-ID': testDeviceId
      },
      body: JSON.stringify({
        songTitle: 'Teste 2',
        recipientName: 'Pedro',
        senderName: 'Ana',
        occasion: 'casamento',
        relationship: 'irm√£o',
        genre: 'rock',
        mood: 'energ√©tico',
        emotionalTone: 'empolgado',
        duration: 'medium',
        tempo: 'fast',
        vocalPreference: 'female',
        hobbies: 'dan√ßa, culin√°ria',
        qualities: 'dedicado, leal',
        lyricsOnly: true
      })
    });
    
    const secondData = await secondCreation.json();
    console.log('üö´ Segunda cria√ß√£o:', JSON.stringify(secondData, null, 2));
    
    if (secondData.success) {
      console.log('‚ùå ERRO CR√çTICO: Segunda cria√ß√£o deveria ter sido bloqueada!');
      console.log('üîç O paywall n√£o est√° funcionando corretamente!');
      return;
    }
    
    if (secondData.error !== 'PAYMENT_REQUIRED') {
      console.log('‚ùå ERRO: Segunda cria√ß√£o deveria retornar erro PAYMENT_REQUIRED');
      return;
    }
    
    console.log('\n‚úÖ SUCESSO: Todos os testes passaram!');
    console.log('‚úÖ O paywall est√° funcionando corretamente!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
testPaywallFlow();